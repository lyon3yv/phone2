{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a mobile phone simulator application called \"Zona Cero RP\" that replicates popular social media and communication apps within a simulated phone interface. The project simulates four major applications: Instagram, Tinder, Wallapop (marketplace), and WhatsApp, providing a realistic mobile experience for roleplay or demonstration purposes.\n\nThe application features a React-based frontend with a phone frame UI that displays a home screen with app icons, and each app provides core functionality like user registration, authentication, content creation, and interaction features typical of their real-world counterparts.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React 18** with TypeScript for the main application framework\n- **Vite** as the build tool and development server for fast compilation and hot reloading\n- **Tailwind CSS** for utility-first styling with custom CSS variables for theming\n- **Shadcn/ui** component library providing pre-built, accessible UI components\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management, caching, and API interactions\n\n## Backend Architecture\n- **Express.js** server providing RESTful API endpoints\n- **In-memory storage** using Map data structures for development/demo purposes\n- **TypeScript** throughout the backend for type safety\n- **Modular route structure** with separate handlers for each app's functionality\n- **Shared schema definitions** between frontend and backend using Zod for validation\n\n## Component Structure\n- **Phone simulator wrapper** that provides the mobile device frame and status bar\n- **App-specific components** for each simulated application (Instagram, Tinder, Wallapop, WhatsApp)\n- **Shared UI components** from Shadcn/ui for consistent design patterns\n- **Custom hooks** for phone storage simulation and mobile responsiveness\n\n## Data Management\n- **Drizzle ORM** configured for PostgreSQL with schema definitions\n- **Zod schemas** for runtime validation and type inference\n- **Local storage hooks** for persisting user sessions and app state\n- **Shared type definitions** ensuring consistency between client and server\n\n## Authentication Pattern\n- **Simple credential-based auth** for each app independently\n- **Session management** through local storage\n- **User isolation** where each app maintains its own user base\n- **Password validation** without encryption (suitable for demo purposes)\n\n## Development Workflow\n- **Hot module replacement** in development mode\n- **TypeScript compilation** with strict type checking\n- **Build process** that bundles both frontend and backend\n- **Path aliases** for clean import statements and better organization\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React ecosystem**: React 18, React DOM, React Hook Form for form management\n- **Build tools**: Vite with TypeScript support, PostCSS, Autoprefixer\n- **Routing**: Wouter for lightweight client-side navigation\n\n## UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Lucide React**: Modern icon library for consistent iconography\n- **Font Awesome**: Icon library for social media and UI icons\n\n## State Management and API\n- **TanStack React Query**: Server state management and caching\n- **Zod**: Runtime type validation and schema definition\n- **React Hook Form**: Form state management with validation\n\n## Database and ORM\n- **Drizzle ORM**: Type-safe SQL toolkit for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Drizzle Kit**: Database migration and introspection tools\n\n## Development Tools\n- **TypeScript**: Static type checking across the entire codebase\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TSX**: TypeScript execution for development server\n\n## Utility Libraries\n- **Date-fns**: Date manipulation and formatting\n- **Nanoid**: URL-safe unique ID generation\n- **Class Variance Authority**: Utility for managing conditional CSS classes\n- **CLSX**: Conditional className utility for dynamic styling","size_bytes":4216},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"server/crypto.ts":{"content":"import bcrypt from \"bcryptjs\";\n\nconst SALT_ROUNDS = 12;\n\nexport class CryptoService {\n  /**\n   * Hash a password using bcrypt\n   */\n  static async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, SALT_ROUNDS);\n  }\n\n  /**\n   * Verify a password against a hash\n   */\n  static async verifyPassword(password: string, hash: string): Promise<boolean> {\n    return bcrypt.compare(password, hash);\n  }\n\n  /**\n   * Encrypt sensitive data (simple base64 encoding for demonstration)\n   * In production, use proper encryption like AES\n   */\n  static encryptData(data: string): string {\n    return Buffer.from(data).toString('base64');\n  }\n\n  /**\n   * Decrypt sensitive data\n   */\n  static decryptData(encryptedData: string): string {\n    return Buffer.from(encryptedData, 'base64').toString('utf8');\n  }\n\n  /**\n   * Generate a secure random token\n   */\n  static generateToken(length: number = 32): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  /**\n   * Hash sensitive data like emails or phone numbers for privacy\n   */\n  static hashSensitiveData(data: string): string {\n    return bcrypt.hashSync(data, 8);\n  }\n}","size_bytes":1346},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertInstagramUserSchema, insertInstagramPostSchema, insertInstagramCommentSchema, \n  insertInstagramFollowSchema, insertInstagramStorySchema,\n  insertTinderUserSchema, insertTinderMatchSchema,\n  insertWallapopUserSchema, insertWallapopProductSchema, insertWallapopChatSchema, insertWallapopMessageSchema,\n  insertWhatsappUserSchema, insertWhatsappChatSchema, insertWhatsappMessageSchema,\n  insertDarkwebUserSchema, insertDarkwebChannelSchema, insertDarkwebMessageSchema,\n  insertAdminUserSchema, insertRegistrationCodeSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { CryptoService } from \"./crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Instagram routes\n  app.post(\"/api/instagram/register\", async (req, res) => {\n    try {\n      const { registrationCode, ...userData } = req.body;\n      \n      // Verify registration code\n      if (!registrationCode) {\n        return res.status(400).json({ message: \"Registration code is required\" });\n      }\n\n      const codeVerification = await storage.getRegistrationCode(registrationCode);\n      if (!codeVerification) {\n        return res.status(400).json({ message: \"Invalid registration code\" });\n      }\n\n      if (codeVerification.isUsed) {\n        return res.status(400).json({ message: \"Registration code already used\" });\n      }\n\n      if (codeVerification.appType !== \"instagram\") {\n        return res.status(400).json({ message: \"Registration code not valid for Instagram\" });\n      }\n\n      if (codeVerification.expiresAt && new Date() > codeVerification.expiresAt) {\n        return res.status(400).json({ message: \"Registration code expired\" });\n      }\n\n      const validatedUserData = insertInstagramUserSchema.parse(userData);\n      \n      // Check if username or email already exists\n      const existingUsername = await storage.getInstagramUserByUsername(validatedUserData.username);\n      const existingEmail = await storage.getInstagramUserByEmail(validatedUserData.email);\n      \n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createInstagramUser(validatedUserData);\n      \n      // Mark registration code as used\n      await storage.markRegistrationCodeAsUsed(registrationCode, userData.username);\n      \n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/instagram/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const user = await storage.getInstagramUserByUsername(username) || \n                   await storage.getInstagramUserByEmail(username);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      const isValidPassword = await storage.verifyInstagramPassword(user.email, password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      res.json({ user: { ...user, password: undefined } });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/instagram/posts\", async (req, res) => {\n    try {\n      const posts = await storage.getInstagramPosts();\n      const postsWithUsernames = await Promise.all(\n        posts.map(async (post) => {\n          const user = await storage.getInstagramUser(post.userId);\n          return {\n            ...post,\n            username: user?.username || \"unknown\"\n          };\n        })\n      );\n      res.json(postsWithUsernames);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch posts\" });\n    }\n  });\n\n  app.post(\"/api/instagram/posts\", async (req, res) => {\n    try {\n      const postData = insertInstagramPostSchema.parse(req.body);\n      const post = await storage.createInstagramPost(postData);\n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid post data\" });\n    }\n  });\n\n  app.post(\"/api/instagram/posts/:id/like\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.likeInstagramPost(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  // Instagram Comments\n  app.get(\"/api/instagram/posts/:id/comments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const comments = await storage.getInstagramComments(id);\n      const commentsWithUsernames = await Promise.all(\n        comments.map(async (comment) => {\n          const user = await storage.getInstagramUser(comment.userId);\n          return {\n            ...comment,\n            username: user?.username || \"unknown\"\n          };\n        })\n      );\n      res.json(commentsWithUsernames);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/instagram/posts/:id/comments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const commentData = insertInstagramCommentSchema.parse({\n        ...req.body,\n        postId: id\n      });\n      const comment = await storage.createInstagramComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid comment data\" });\n    }\n  });\n\n  // Instagram Follow System\n  app.post(\"/api/instagram/follow\", async (req, res) => {\n    try {\n      const followData = insertInstagramFollowSchema.parse(req.body);\n      const follow = await storage.followUser(followData.followerId, followData.followingId);\n      res.json(follow);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid follow data\" });\n    }\n  });\n\n  app.delete(\"/api/instagram/follow\", async (req, res) => {\n    try {\n      const { followerId, followingId } = req.body;\n      await storage.unfollowUser(followerId, followingId);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to unfollow user\" });\n    }\n  });\n\n  app.get(\"/api/instagram/users/:id/following-status/:targetId\", async (req, res) => {\n    try {\n      const { id, targetId } = req.params;\n      const isFollowing = await storage.isFollowing(id, targetId);\n      res.json({ isFollowing });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check following status\" });\n    }\n  });\n\n  app.get(\"/api/instagram/users/:id/followers\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const followers = await storage.getFollowers(id);\n      res.json(followers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch followers\" });\n    }\n  });\n\n  app.get(\"/api/instagram/users/:id/following\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const following = await storage.getFollowing(id);\n      res.json(following);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch following\" });\n    }\n  });\n\n  // Instagram Stories\n  app.get(\"/api/instagram/stories\", async (req, res) => {\n    try {\n      const stories = await storage.getInstagramStories();\n      const storiesWithUsernames = await Promise.all(\n        stories.map(async (story) => {\n          const user = await storage.getInstagramUser(story.userId);\n          return {\n            ...story,\n            username: user?.username || \"unknown\"\n          };\n        })\n      );\n      res.json(storiesWithUsernames);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stories\" });\n    }\n  });\n\n  app.post(\"/api/instagram/stories\", async (req, res) => {\n    try {\n      const storyData = insertInstagramStorySchema.parse({\n        ...req.body,\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now\n      });\n      const story = await storage.createInstagramStory(storyData);\n      res.json(story);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid story data\" });\n    }\n  });\n\n  app.get(\"/api/instagram/users/:id/posts\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const posts = await storage.getInstagramPostsByUser(id);\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user posts\" });\n    }\n  });\n\n  // Tinder routes\n  app.post(\"/api/tinder/register\", async (req, res) => {\n    try {\n      const { registrationCode, ...userData } = req.body;\n      \n      // Verify registration code\n      if (!registrationCode) {\n        return res.status(400).json({ message: \"Registration code is required\" });\n      }\n\n      const codeVerification = await storage.getRegistrationCode(registrationCode);\n      if (!codeVerification) {\n        return res.status(400).json({ message: \"Invalid registration code\" });\n      }\n\n      if (codeVerification.isUsed) {\n        return res.status(400).json({ message: \"Registration code already used\" });\n      }\n\n      if (codeVerification.appType !== \"tinder\") {\n        return res.status(400).json({ message: \"Registration code not valid for Tinder\" });\n      }\n\n      if (codeVerification.expiresAt && new Date() > codeVerification.expiresAt) {\n        return res.status(400).json({ message: \"Registration code expired\" });\n      }\n\n      const validatedUserData = insertTinderUserSchema.parse(userData);\n      \n      const existingUser = await storage.getTinderUserByName(validatedUserData.name);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Name already exists\" });\n      }\n\n      const user = await storage.createTinderUser(validatedUserData);\n      \n      // Mark registration code as used\n      await storage.markRegistrationCodeAsUsed(registrationCode, userData.name);\n      \n      res.json({ user });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/tinder/login\", async (req, res) => {\n    try {\n      const { name } = req.body;\n      const user = await storage.getTinderUserByName(name);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/tinder/potential-matches/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const matches = await storage.getPotentialMatches(userId);\n      res.json(matches);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch potential matches\" });\n    }\n  });\n\n  app.post(\"/api/tinder/swipe\", async (req, res) => {\n    try {\n      const matchData = insertTinderMatchSchema.parse(req.body);\n      const match = await storage.createTinderMatch(matchData);\n      res.json(match);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid match data\" });\n    }\n  });\n\n  app.get(\"/api/tinder/matches/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const matches = await storage.getTinderMatches(userId);\n      res.json(matches);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch matches\" });\n    }\n  });\n\n  // Wallapop routes\n  app.post(\"/api/wallapop/register\", async (req, res) => {\n    try {\n      const { registrationCode, ...userData } = req.body;\n      \n      // Verify registration code\n      if (!registrationCode) {\n        return res.status(400).json({ message: \"Registration code is required\" });\n      }\n\n      const codeVerification = await storage.getRegistrationCode(registrationCode);\n      if (!codeVerification) {\n        return res.status(400).json({ message: \"Invalid registration code\" });\n      }\n\n      if (codeVerification.isUsed) {\n        return res.status(400).json({ message: \"Registration code already used\" });\n      }\n\n      if (codeVerification.appType !== \"wallapop\") {\n        return res.status(400).json({ message: \"Registration code not valid for Wallapop\" });\n      }\n\n      if (codeVerification.expiresAt && new Date() > codeVerification.expiresAt) {\n        return res.status(400).json({ message: \"Registration code expired\" });\n      }\n\n      const validatedUserData = insertWallapopUserSchema.parse(userData);\n      \n      const existingUser = await storage.getWallapopUserByEmail(validatedUserData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createWallapopUser(validatedUserData);\n      \n      // Mark registration code as used\n      await storage.markRegistrationCodeAsUsed(registrationCode, userData.email);\n      \n      res.json({ user });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/wallapop/login\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      const user = await storage.getWallapopUserByEmail(email);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/wallapop/products\", async (req, res) => {\n    try {\n      const products = await storage.getWallapopProducts();\n      const productsWithSellers = await Promise.all(\n        products.map(async (product) => {\n          const seller = await storage.getWallapopUser(product.sellerId);\n          return {\n            ...product,\n            sellerName: seller?.name || \"unknown\",\n            sellerLocation: seller?.location || \"unknown\"\n          };\n        })\n      );\n      res.json(productsWithSellers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/wallapop/products/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const product = await storage.getWallapopProduct(id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      \n      // Increment views\n      await storage.incrementProductViews(id);\n      \n      // Get seller info\n      const seller = await storage.getWallapopUser(product.sellerId);\n      res.json({ ...product, sellerName: seller?.name || \"Unknown\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/wallapop/products\", async (req, res) => {\n    try {\n      const productData = insertWallapopProductSchema.parse(req.body);\n      const product = await storage.createWallapopProduct(productData);\n      res.json(product);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid product data\" });\n    }\n  });\n\n  // Wallapop Chat\n  app.get(\"/api/wallapop/chats/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const chats = await storage.getWallapopChats(userId);\n      \n      const chatsWithDetails = await Promise.all(\n        chats.map(async (chat) => {\n          const product = await storage.getWallapopProduct(chat.productId);\n          const otherUser = chat.buyerId === userId \n            ? await storage.getWallapopUser(chat.sellerId)\n            : await storage.getWallapopUser(chat.buyerId);\n          \n          return {\n            ...chat,\n            productTitle: product?.title || \"Unknown\",\n            productImage: product?.images?.[0] || null,\n            otherUserName: otherUser?.name || \"Unknown\"\n          };\n        })\n      );\n      \n      res.json(chatsWithDetails);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chats\" });\n    }\n  });\n\n  app.post(\"/api/wallapop/chats\", async (req, res) => {\n    try {\n      const { productId, buyerId, sellerId } = req.body;\n      const chat = await storage.getOrCreateWallapopChat(productId, buyerId, sellerId);\n      res.json(chat);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid chat data\" });\n    }\n  });\n\n  app.get(\"/api/wallapop/chats/:chatId/messages\", async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const messages = await storage.getWallapopMessages(chatId);\n      \n      const messagesWithSenders = await Promise.all(\n        messages.map(async (message) => {\n          const sender = await storage.getWallapopUser(message.senderId);\n          return {\n            ...message,\n            senderName: sender?.name || \"Unknown\"\n          };\n        })\n      );\n      \n      res.json(messagesWithSenders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/wallapop/chats/:chatId/messages\", async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const messageData = insertWallapopMessageSchema.parse({\n        ...req.body,\n        chatId\n      });\n      const message = await storage.createWallapopMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n\n  // WhatsApp routes\n  app.post(\"/api/whatsapp/register\", async (req, res) => {\n    try {\n      const { registrationCode, ...userData } = req.body;\n      \n      // Verify registration code\n      if (!registrationCode) {\n        return res.status(400).json({ message: \"Registration code is required\" });\n      }\n\n      const codeVerification = await storage.getRegistrationCode(registrationCode);\n      if (!codeVerification) {\n        return res.status(400).json({ message: \"Invalid registration code\" });\n      }\n\n      if (codeVerification.isUsed) {\n        return res.status(400).json({ message: \"Registration code already used\" });\n      }\n\n      if (codeVerification.appType !== \"whatsapp\") {\n        return res.status(400).json({ message: \"Registration code not valid for WhatsApp\" });\n      }\n\n      if (codeVerification.expiresAt && new Date() > codeVerification.expiresAt) {\n        return res.status(400).json({ message: \"Registration code expired\" });\n      }\n\n      const validatedUserData = insertWhatsappUserSchema.parse(userData);\n      \n      const existingUser = await storage.getWhatsappUserByPhone(validatedUserData.phone);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Phone number already registered\" });\n      }\n\n      const user = await storage.createWhatsappUser(validatedUserData);\n      \n      // Mark registration code as used\n      await storage.markRegistrationCodeAsUsed(registrationCode, userData.phone);\n      \n      res.json({ user });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/whatsapp/login\", async (req, res) => {\n    try {\n      const { phone } = req.body;\n      const user = await storage.getWhatsappUserByPhone(phone);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Phone number not found\" });\n      }\n\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/whatsapp/users\", async (req, res) => {\n    try {\n      const users = await storage.getWhatsappUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/whatsapp/chats\", async (req, res) => {\n    try {\n      const chatData = insertWhatsappChatSchema.parse(req.body);\n      const chat = await storage.createWhatsappChat(chatData);\n      res.json(chat);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid chat data\" });\n    }\n  });\n\n  app.post(\"/api/whatsapp/chats/get-or-create\", async (req, res) => {\n    try {\n      const { participants } = req.body;\n      if (!participants || !Array.isArray(participants) || participants.length !== 2) {\n        return res.status(400).json({ message: \"Must provide exactly 2 participants\" });\n      }\n      const chat = await storage.getOrCreateWhatsappChat(participants);\n      res.json(chat);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get or create chat\" });\n    }\n  });\n\n  app.get(\"/api/whatsapp/chats/:phone\", async (req, res) => {\n    try {\n      const { phone } = req.params;\n      const chats = await storage.getWhatsappChatsByPhone(phone);\n      \n      // Enrich chats with participant details and latest message\n      const enrichedChats = await Promise.all(\n        chats.map(async (chat) => {\n          // Get other participant (not the current user)\n          const otherParticipantPhone = chat.participants.find(p => p !== phone);\n          const otherParticipant = otherParticipantPhone ? \n            await storage.getWhatsappUserByPhone(otherParticipantPhone) : null;\n          \n          // Get latest message\n          const messages = await storage.getWhatsappMessages(chat.id);\n          const latestMessage = messages[messages.length - 1] || null;\n          \n          return {\n            ...chat,\n            otherParticipant,\n            latestMessage,\n            messageCount: messages.length\n          };\n        })\n      );\n      \n      res.json(enrichedChats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chats\" });\n    }\n  });\n\n  app.post(\"/api/whatsapp/messages\", async (req, res) => {\n    try {\n      const messageData = insertWhatsappMessageSchema.parse(req.body);\n      const message = await storage.createWhatsappMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n\n  app.get(\"/api/whatsapp/messages/:chatId\", async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const messages = await storage.getWhatsappMessages(chatId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Dark Web Routes\n  app.post(\"/api/darkweb/register\", async (req, res) => {\n    try {\n      const { registrationCode, ...userData } = req.body;\n      \n      // Verify registration code\n      if (!registrationCode) {\n        return res.status(400).json({ message: \"Registration code is required\" });\n      }\n\n      const codeVerification = await storage.getRegistrationCode(registrationCode);\n      if (!codeVerification) {\n        return res.status(400).json({ message: \"Invalid registration code\" });\n      }\n\n      if (codeVerification.isUsed) {\n        return res.status(400).json({ message: \"Registration code already used\" });\n      }\n\n      if (codeVerification.appType !== \"darkweb\") {\n        return res.status(400).json({ message: \"Registration code not valid for Dark Web\" });\n      }\n\n      if (codeVerification.expiresAt && new Date() > codeVerification.expiresAt) {\n        return res.status(400).json({ message: \"Registration code expired\" });\n      }\n\n      const validatedUserData = insertDarkwebUserSchema.parse(userData);\n      const existingUser = await storage.getDarkwebUserByHandle(validatedUserData.handle);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Handle already exists\" });\n      }\n      const user = await storage.createDarkwebUser(validatedUserData);\n      \n      // Mark registration code as used\n      await storage.markRegistrationCodeAsUsed(registrationCode, userData.handle);\n      \n      res.json({ user: { ...user, passwordHash: undefined } });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.post(\"/api/darkweb/login\", async (req, res) => {\n    try {\n      const { handle, password } = req.body;\n      const user = await storage.verifyDarkwebPassword(handle, password);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      res.json({ user: { ...user, passwordHash: undefined } });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/darkweb/channels\", async (req, res) => {\n    try {\n      const channels = await storage.getDarkwebChannels();\n      res.json(channels);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch channels\" });\n    }\n  });\n\n  app.post(\"/api/darkweb/channels\", async (req, res) => {\n    try {\n      const channelData = insertDarkwebChannelSchema.parse(req.body);\n      const channel = await storage.createDarkwebChannel(channelData);\n      res.json(channel);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid channel data\" });\n    }\n  });\n\n  app.get(\"/api/darkweb/channels/:id/messages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messages = await storage.getDarkwebMessages(id);\n      \n      const messagesWithHandles = await Promise.all(\n        messages.map(async (message) => {\n          const sender = await storage.getDarkwebUser(message.senderId);\n          return {\n            ...message,\n            senderHandle: sender?.handle || \"Unknown\"\n          };\n        })\n      );\n      \n      res.json(messagesWithHandles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/darkweb/channels/:id/messages\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const messageData = insertDarkwebMessageSchema.parse({\n        ...req.body,\n        channelId: id\n      });\n      const message = await storage.createDarkwebMessage(messageData);\n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n\n  // Admin routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const admin = await storage.verifyAdminPassword(username, password);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials or admin already used\" });\n      }\n\n      // Mark one-time use admin as used\n      if (admin.isOneTimeUse) {\n        await storage.markAdminUserAsUsed(admin.id);\n      }\n\n      res.json({ admin: { ...admin, password: undefined } });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/codes/generate\", async (req, res) => {\n    try {\n      const { appType, adminId, count = 1, expiresAt } = req.body;\n      \n      if (!appType || !adminId) {\n        return res.status(400).json({ message: \"App type and admin ID are required\" });\n      }\n\n      const codes = [];\n      for (let i = 0; i < count; i++) {\n        const code = CryptoService.generateToken(8).toUpperCase();\n        const codeData = insertRegistrationCodeSchema.parse({\n          code,\n          appType,\n          createdBy: adminId,\n          expiresAt: expiresAt ? new Date(expiresAt) : null\n        });\n        const createdCode = await storage.createRegistrationCode(codeData);\n        codes.push(createdCode);\n      }\n\n      res.json({ codes });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to generate codes\" });\n    }\n  });\n\n  app.get(\"/api/admin/codes\", async (req, res) => {\n    try {\n      const { adminId, appType } = req.query;\n      \n      let codes;\n      if (adminId) {\n        codes = await storage.getRegistrationCodesByAdmin(adminId as string);\n      } else {\n        codes = await storage.getUnusedRegistrationCodes(appType as string);\n      }\n\n      res.json({ codes });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch codes\" });\n    }\n  });\n\n  app.post(\"/api/admin/verify-code\", async (req, res) => {\n    try {\n      const { code, appType } = req.body;\n      \n      const registrationCode = await storage.getRegistrationCode(code);\n      if (!registrationCode) {\n        return res.status(404).json({ message: \"Invalid code\" });\n      }\n\n      if (registrationCode.isUsed) {\n        return res.status(400).json({ message: \"Code already used\" });\n      }\n\n      if (registrationCode.appType !== appType) {\n        return res.status(400).json({ message: \"Code not valid for this app\" });\n      }\n\n      if (registrationCode.expiresAt && new Date() > registrationCode.expiresAt) {\n        return res.status(400).json({ message: \"Code expired\" });\n      }\n\n      res.json({ valid: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Code verification failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/use-code\", async (req, res) => {\n    try {\n      const { code, usedBy } = req.body;\n      \n      await storage.markRegistrationCodeAsUsed(code, usedBy);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark code as used\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29054},"server/storage.ts":{"content":"import { \n  type InstagramUser, type InsertInstagramUser, type InstagramPost, type InsertInstagramPost,\n  type InstagramComment, type InsertInstagramComment, type InstagramFollow, type InsertInstagramFollow,\n  type InstagramStory, type InsertInstagramStory,\n  type TinderUser, type InsertTinderUser, type TinderMatch, type InsertTinderMatch,\n  type WallapopUser, type InsertWallapopUser, type WallapopProduct, type InsertWallapopProduct,\n  type WallapopChat, type InsertWallapopChat, type WallapopMessage, type InsertWallapopMessage,\n  type WhatsappUser, type InsertWhatsappUser, type WhatsappChat, type InsertWhatsappChat,\n  type WhatsappMessage, type InsertWhatsappMessage,\n  type DarkwebUser, type InsertDarkwebUser, type DarkwebChannel, type InsertDarkwebChannel,\n  type DarkwebMessage, type InsertDarkwebMessage,\n  type AdminUser, type InsertAdminUser, type RegistrationCode, type InsertRegistrationCode\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { CryptoService } from \"./crypto\";\n\nexport interface IStorage {\n  // Instagram\n  getInstagramUser(id: string): Promise<InstagramUser | undefined>;\n  getInstagramUserByUsername(username: string): Promise<InstagramUser | undefined>;\n  getInstagramUserByEmail(email: string): Promise<InstagramUser | undefined>;\n  createInstagramUser(user: InsertInstagramUser): Promise<InstagramUser>;\n  verifyInstagramPassword(email: string, password: string): Promise<InstagramUser | null>;\n  getInstagramPosts(): Promise<InstagramPost[]>;\n  getInstagramPostsByUser(userId: string): Promise<InstagramPost[]>;\n  createInstagramPost(post: InsertInstagramPost): Promise<InstagramPost>;\n  likeInstagramPost(postId: string): Promise<void>;\n  createInstagramComment(comment: InsertInstagramComment): Promise<InstagramComment>;\n  getInstagramComments(postId: string): Promise<InstagramComment[]>;\n  followUser(followerId: string, followingId: string): Promise<InstagramFollow>;\n  unfollowUser(followerId: string, followingId: string): Promise<void>;\n  isFollowing(followerId: string, followingId: string): Promise<boolean>;\n  getFollowers(userId: string): Promise<InstagramUser[]>;\n  getFollowing(userId: string): Promise<InstagramUser[]>;\n  createInstagramStory(story: InsertInstagramStory): Promise<InstagramStory>;\n  getInstagramStories(): Promise<InstagramStory[]>;\n  getInstagramStoriesByUser(userId: string): Promise<InstagramStory[]>;\n\n  // Tinder\n  getTinderUser(id: string): Promise<TinderUser | undefined>;\n  getTinderUserByName(name: string): Promise<TinderUser | undefined>;\n  createTinderUser(user: InsertTinderUser): Promise<TinderUser>;\n  getTinderUsers(): Promise<TinderUser[]>;\n  getPotentialMatches(userId: string): Promise<TinderUser[]>;\n  createTinderMatch(match: InsertTinderMatch): Promise<TinderMatch>;\n  getTinderMatches(userId: string): Promise<TinderMatch[]>;\n\n  // Wallapop\n  getWallapopUser(id: string): Promise<WallapopUser | undefined>;\n  getWallapopUserByEmail(email: string): Promise<WallapopUser | undefined>;\n  createWallapopUser(user: InsertWallapopUser): Promise<WallapopUser>;\n  getWallapopProducts(): Promise<WallapopProduct[]>;\n  getWallapopProduct(id: string): Promise<WallapopProduct | undefined>;\n  createWallapopProduct(product: InsertWallapopProduct): Promise<WallapopProduct>;\n  incrementProductViews(productId: string): Promise<void>;\n  createWallapopChat(chat: InsertWallapopChat): Promise<WallapopChat>;\n  getWallapopChats(userId: string): Promise<WallapopChat[]>;\n  createWallapopMessage(message: InsertWallapopMessage): Promise<WallapopMessage>;\n  getWallapopMessages(chatId: string): Promise<WallapopMessage[]>;\n  getOrCreateWallapopChat(productId: string, buyerId: string, sellerId: string): Promise<WallapopChat>;\n\n  // WhatsApp\n  getWhatsappUser(id: string): Promise<WhatsappUser | undefined>;\n  getWhatsappUserByPhone(phone: string): Promise<WhatsappUser | undefined>;\n  createWhatsappUser(user: InsertWhatsappUser): Promise<WhatsappUser>;\n  getWhatsappUsers(): Promise<WhatsappUser[]>;\n  createWhatsappChat(chat: InsertWhatsappChat): Promise<WhatsappChat>;\n  getWhatsappChatsByPhone(phone: string): Promise<WhatsappChat[]>;\n  getOrCreateWhatsappChat(participants: string[]): Promise<WhatsappChat>;\n  createWhatsappMessage(message: InsertWhatsappMessage): Promise<WhatsappMessage>;\n  getWhatsappMessages(chatId: string): Promise<WhatsappMessage[]>;\n\n  // Dark Web\n  getDarkwebUser(id: string): Promise<DarkwebUser | undefined>;\n  getDarkwebUserByHandle(handle: string): Promise<DarkwebUser | undefined>;\n  createDarkwebUser(user: InsertDarkwebUser): Promise<DarkwebUser>;\n  verifyDarkwebPassword(handle: string, password: string): Promise<DarkwebUser | null>;\n  getDarkwebChannels(): Promise<DarkwebChannel[]>;\n  createDarkwebChannel(channel: InsertDarkwebChannel): Promise<DarkwebChannel>;\n  getDarkwebChannel(id: string): Promise<DarkwebChannel | undefined>;\n  createDarkwebMessage(message: InsertDarkwebMessage): Promise<DarkwebMessage>;\n  getDarkwebMessages(channelId: string): Promise<DarkwebMessage[]>;\n  updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void>;\n\n  // Admin System\n  getAdminUser(id: string): Promise<AdminUser | undefined>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  verifyAdminPassword(username: string, password: string): Promise<AdminUser | null>;\n  markAdminUserAsUsed(id: string): Promise<void>;\n  createRegistrationCode(code: InsertRegistrationCode): Promise<RegistrationCode>;\n  getRegistrationCode(code: string): Promise<RegistrationCode | undefined>;\n  getRegistrationCodesByAdmin(adminId: string): Promise<RegistrationCode[]>;\n  markRegistrationCodeAsUsed(code: string, usedBy: string): Promise<void>;\n  getUnusedRegistrationCodes(appType?: string): Promise<RegistrationCode[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private instagramUsers: Map<string, InstagramUser> = new Map();\n  private instagramPosts: Map<string, InstagramPost> = new Map();\n  private instagramComments: Map<string, InstagramComment> = new Map();\n  private instagramFollows: Map<string, InstagramFollow> = new Map();\n  private instagramStories: Map<string, InstagramStory> = new Map();\n  private tinderUsers: Map<string, TinderUser> = new Map();\n  private tinderMatches: Map<string, TinderMatch> = new Map();\n  private wallapopUsers: Map<string, WallapopUser> = new Map();\n  private wallapopProducts: Map<string, WallapopProduct> = new Map();\n  private wallapopChats: Map<string, WallapopChat> = new Map();\n  private wallapopMessages: Map<string, WallapopMessage> = new Map();\n  private whatsappUsers: Map<string, WhatsappUser> = new Map();\n  private whatsappChats: Map<string, WhatsappChat> = new Map();\n  private whatsappMessages: Map<string, WhatsappMessage> = new Map();\n  private darkwebUsers: Map<string, DarkwebUser> = new Map();\n  private darkwebChannels: Map<string, DarkwebChannel> = new Map();\n  private darkwebMessages: Map<string, DarkwebMessage> = new Map();\n  private adminUsers: Map<string, AdminUser> = new Map();\n  private registrationCodes: Map<string, RegistrationCode> = new Map();\n\n  constructor() {\n    this.initializeSampleData();\n  }\n\n  private async initializeSampleData() {\n    // Add sample Instagram user and post\n    const hashedAdminPassword = await CryptoService.hashPassword(\"admin123\");\n    const sampleInstagramUser: InstagramUser = {\n      id: \"ig-sample-1\",\n      username: \"zona_cero_admin\",\n      email: \"admin@zonacerop.com\",\n      password: hashedAdminPassword,\n      fullName: \"Zona Cero RP\",\n      bio: \"Servidor oficial de roleplay 🎮\",\n      profileImage: \"https://images.unsplash.com/photo-1511512578047-dfb367046420?w=400\",\n      verified: true,\n      createdAt: new Date()\n    };\n    this.instagramUsers.set(sampleInstagramUser.id, sampleInstagramUser);\n\n    const samplePost: InstagramPost = {\n      id: \"post-sample-1\",\n      userId: sampleInstagramUser.id,\n      mediaUrls: [\"https://images.unsplash.com/photo-1511512578047-dfb367046420?w=400\"],\n      mediaType: \"image\",\n      caption: \"¡Bienvenidos al servidor Zona Cero RP! 🎮\",\n      likes: 42,\n      commentsCount: 3,\n      location: \"Los Santos\",\n      createdAt: new Date()\n    };\n    this.instagramPosts.set(samplePost.id, samplePost);\n\n    // No sample Tinder users - users must register\n\n    // Add sample Wallapop user and product\n    const sampleWallapopUser: WallapopUser = {\n      id: \"wallapop-sample-1\",\n      name: \"Carlos_ZCR\",\n      email: \"carlos@zonacerop.com\",\n      location: \"Los Santos\",\n      rating: 5,\n      createdAt: new Date()\n    };\n    this.wallapopUsers.set(sampleWallapopUser.id, sampleWallapopUser);\n\n    const sampleProduct: WallapopProduct = {\n      id: \"product-sample-1\",\n      sellerId: sampleWallapopUser.id,\n      title: \"Coche deportivo (RP)\",\n      description: \"Vendo mi coche deportivo en perfecto estado para roleplay\",\n      price: 5000000, // 50000 euros in cents\n      category: \"Vehículos\",\n      condition: \"Excelente\",\n      images: [\"https://images.unsplash.com/photo-1502877338535-766e1452684a?w=400\"],\n      location: \"Los Santos\",\n      views: 0,\n      sold: false,\n      createdAt: new Date()\n    };\n    this.wallapopProducts.set(sampleProduct.id, sampleProduct);\n\n    // Add sample Dark Web data\n    const hashedDarkwebPassword = await CryptoService.hashPassword(\"darkpassword123\");\n    const sampleDarkwebUser: DarkwebUser = {\n      id: \"darkweb-sample-1\",\n      handle: \"Shadow_Admin\",\n      passwordHash: hashedDarkwebPassword,\n      reputation: 100,\n      isOnline: true,\n      lastSeen: new Date(),\n      createdAt: new Date()\n    };\n    this.darkwebUsers.set(sampleDarkwebUser.id, sampleDarkwebUser);\n\n    const sampleDarkwebChannel: DarkwebChannel = {\n      id: \"channel-sample-1\",\n      name: \"general\",\n      description: \"Canal general para discusiones anónimas\",\n      isPrivate: false,\n      accessCode: null,\n      createdBy: sampleDarkwebUser.id,\n      createdAt: new Date()\n    };\n    this.darkwebChannels.set(sampleDarkwebChannel.id, sampleDarkwebChannel);\n\n    const privateDarkwebChannel: DarkwebChannel = {\n      id: \"channel-sample-2\",\n      name: \"zona-cero-secrets\",\n      description: \"Canal privado para información clasificada del servidor\",\n      isPrivate: true,\n      accessCode: \"ZCRRP2025\",\n      createdBy: sampleDarkwebUser.id,\n      createdAt: new Date()\n    };\n    this.darkwebChannels.set(privateDarkwebChannel.id, privateDarkwebChannel);\n\n    const sampleDarkwebMessage: DarkwebMessage = {\n      id: \"darkmsg-sample-1\",\n      channelId: sampleDarkwebChannel.id,\n      senderId: sampleDarkwebUser.id,\n      content: \"Bienvenidos a la red anónima de Zona Cero RP. Aquí pueden compartir información de forma segura.\",\n      messageType: \"text\",\n      isEncrypted: false,\n      replyToId: null,\n      sentAt: new Date()\n    };\n    this.darkwebMessages.set(sampleDarkwebMessage.id, sampleDarkwebMessage);\n\n    // Add initial admin user (one-time use)\n    const hashedInitialAdminPassword = await CryptoService.hashPassword(\"admin2025!\");\n    const initialAdminUser: AdminUser = {\n      id: \"admin-initial-1\",\n      username: \"admin_inicial\",\n      password: hashedInitialAdminPassword,\n      isOneTimeUse: true,\n      isUsed: false,\n      createdAt: new Date(),\n      usedAt: null\n    };\n    this.adminUsers.set(initialAdminUser.id, initialAdminUser);\n  }\n\n  // Instagram methods\n  async getInstagramUser(id: string): Promise<InstagramUser | undefined> {\n    return this.instagramUsers.get(id);\n  }\n\n  async getInstagramUserByUsername(username: string): Promise<InstagramUser | undefined> {\n    return Array.from(this.instagramUsers.values()).find(user => user.username === username);\n  }\n\n  async getInstagramUserByEmail(email: string): Promise<InstagramUser | undefined> {\n    return Array.from(this.instagramUsers.values()).find(user => user.email === email);\n  }\n\n  async createInstagramUser(insertUser: InsertInstagramUser): Promise<InstagramUser> {\n    const id = randomUUID();\n    const hashedPassword = await CryptoService.hashPassword(insertUser.password);\n    const user: InstagramUser = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      verified: false,\n      createdAt: new Date()\n    };\n    this.instagramUsers.set(id, user);\n    return user;\n  }\n\n  async verifyInstagramPassword(email: string, password: string): Promise<InstagramUser | null> {\n    const user = await this.getInstagramUserByEmail(email);\n    if (!user) return null;\n    \n    const isValid = await CryptoService.verifyPassword(password, user.password);\n    return isValid ? user : null;\n  }\n\n  async getInstagramPosts(): Promise<InstagramPost[]> {\n    return Array.from(this.instagramPosts.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getInstagramPostsByUser(userId: string): Promise<InstagramPost[]> {\n    return Array.from(this.instagramPosts.values())\n      .filter(post => post.userId === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createInstagramPost(insertPost: InsertInstagramPost): Promise<InstagramPost> {\n    const id = randomUUID();\n    const post: InstagramPost = {\n      ...insertPost,\n      id,\n      likes: 0,\n      commentsCount: 0,\n      createdAt: new Date()\n    };\n    this.instagramPosts.set(id, post);\n    return post;\n  }\n\n  async likeInstagramPost(postId: string): Promise<void> {\n    const post = this.instagramPosts.get(postId);\n    if (post) {\n      post.likes = (post.likes || 0) + 1;\n      this.instagramPosts.set(postId, post);\n    }\n  }\n\n  async createInstagramComment(insertComment: InsertInstagramComment): Promise<InstagramComment> {\n    const id = randomUUID();\n    const comment: InstagramComment = {\n      ...insertComment,\n      id,\n      createdAt: new Date()\n    };\n    this.instagramComments.set(id, comment);\n    \n    // Increment comment count on post\n    const post = this.instagramPosts.get(insertComment.postId);\n    if (post) {\n      post.commentsCount = (post.commentsCount || 0) + 1;\n      this.instagramPosts.set(insertComment.postId, post);\n    }\n    \n    return comment;\n  }\n\n  async getInstagramComments(postId: string): Promise<InstagramComment[]> {\n    return Array.from(this.instagramComments.values())\n      .filter(comment => comment.postId === postId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  async followUser(followerId: string, followingId: string): Promise<InstagramFollow> {\n    const id = randomUUID();\n    const follow: InstagramFollow = {\n      id,\n      followerId,\n      followingId,\n      createdAt: new Date()\n    };\n    this.instagramFollows.set(id, follow);\n    return follow;\n  }\n\n  async unfollowUser(followerId: string, followingId: string): Promise<void> {\n    const follow = Array.from(this.instagramFollows.values())\n      .find(f => f.followerId === followerId && f.followingId === followingId);\n    if (follow) {\n      this.instagramFollows.delete(follow.id);\n    }\n  }\n\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    return Array.from(this.instagramFollows.values())\n      .some(f => f.followerId === followerId && f.followingId === followingId);\n  }\n\n  async getFollowers(userId: string): Promise<InstagramUser[]> {\n    const followerIds = Array.from(this.instagramFollows.values())\n      .filter(f => f.followingId === userId)\n      .map(f => f.followerId);\n    \n    return followerIds.map(id => this.instagramUsers.get(id)).filter(Boolean) as InstagramUser[];\n  }\n\n  async getFollowing(userId: string): Promise<InstagramUser[]> {\n    const followingIds = Array.from(this.instagramFollows.values())\n      .filter(f => f.followerId === userId)\n      .map(f => f.followingId);\n    \n    return followingIds.map(id => this.instagramUsers.get(id)).filter(Boolean) as InstagramUser[];\n  }\n\n  async createInstagramStory(insertStory: InsertInstagramStory): Promise<InstagramStory> {\n    const id = randomUUID();\n    const story: InstagramStory = {\n      ...insertStory,\n      id,\n      createdAt: new Date()\n    };\n    this.instagramStories.set(id, story);\n    return story;\n  }\n\n  async getInstagramStories(): Promise<InstagramStory[]> {\n    const now = new Date();\n    // Filter out expired stories\n    const activeStories = Array.from(this.instagramStories.values())\n      .filter(story => new Date(story.expiresAt) > now);\n    \n    // Clean up expired stories\n    Array.from(this.instagramStories.values())\n      .filter(story => new Date(story.expiresAt) <= now)\n      .forEach(story => this.instagramStories.delete(story.id));\n    \n    return activeStories.sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getInstagramStoriesByUser(userId: string): Promise<InstagramStory[]> {\n    const now = new Date();\n    return Array.from(this.instagramStories.values())\n      .filter(story => story.userId === userId && new Date(story.expiresAt) > now)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  // Tinder methods\n  async getTinderUser(id: string): Promise<TinderUser | undefined> {\n    return this.tinderUsers.get(id);\n  }\n\n  async getTinderUserByName(name: string): Promise<TinderUser | undefined> {\n    return Array.from(this.tinderUsers.values()).find(user => user.name === name);\n  }\n\n  async createTinderUser(insertUser: InsertTinderUser): Promise<TinderUser> {\n    const id = randomUUID();\n    const user: TinderUser = {\n      ...insertUser,\n      id,\n      photos: insertUser.photos || [],\n      interests: insertUser.interests || [],\n      createdAt: new Date()\n    };\n    this.tinderUsers.set(id, user);\n    return user;\n  }\n\n  async getTinderUsers(): Promise<TinderUser[]> {\n    return Array.from(this.tinderUsers.values());\n  }\n\n  async getPotentialMatches(userId: string): Promise<TinderUser[]> {\n    const userMatches = Array.from(this.tinderMatches.values())\n      .filter(match => match.user1Id === userId || match.user2Id === userId);\n    \n    const matchedUserIds = userMatches.map(match => \n      match.user1Id === userId ? match.user2Id : match.user1Id\n    );\n\n    return Array.from(this.tinderUsers.values())\n      .filter(user => user.id !== userId && !matchedUserIds.includes(user.id));\n  }\n\n  async createTinderMatch(insertMatch: InsertTinderMatch): Promise<TinderMatch> {\n    const id = randomUUID();\n    const match: TinderMatch = {\n      ...insertMatch,\n      id,\n      isMatch: false,\n      swipedAt: new Date()\n    };\n    this.tinderMatches.set(id, match);\n    return match;\n  }\n\n  async getTinderMatches(userId: string): Promise<TinderMatch[]> {\n    return Array.from(this.tinderMatches.values())\n      .filter(match => (match.user1Id === userId || match.user2Id === userId) && match.isMatch);\n  }\n\n  // Wallapop methods\n  async getWallapopUser(id: string): Promise<WallapopUser | undefined> {\n    return this.wallapopUsers.get(id);\n  }\n\n  async getWallapopUserByEmail(email: string): Promise<WallapopUser | undefined> {\n    return Array.from(this.wallapopUsers.values()).find(user => user.email === email);\n  }\n\n  async createWallapopUser(insertUser: InsertWallapopUser): Promise<WallapopUser> {\n    const id = randomUUID();\n    const user: WallapopUser = {\n      ...insertUser,\n      id,\n      rating: 5,\n      createdAt: new Date()\n    };\n    this.wallapopUsers.set(id, user);\n    return user;\n  }\n\n  async getWallapopProducts(): Promise<WallapopProduct[]> {\n    return Array.from(this.wallapopProducts.values())\n      .filter(product => !product.sold)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async getWallapopProduct(id: string): Promise<WallapopProduct | undefined> {\n    return this.wallapopProducts.get(id);\n  }\n\n  async createWallapopProduct(insertProduct: InsertWallapopProduct): Promise<WallapopProduct> {\n    const id = randomUUID();\n    const product: WallapopProduct = {\n      ...insertProduct,\n      id,\n      images: insertProduct.images || [],\n      views: 0,\n      sold: false,\n      createdAt: new Date()\n    };\n    this.wallapopProducts.set(id, product);\n    return product;\n  }\n\n  async incrementProductViews(productId: string): Promise<void> {\n    const product = this.wallapopProducts.get(productId);\n    if (product) {\n      product.views = (product.views || 0) + 1;\n      this.wallapopProducts.set(productId, product);\n    }\n  }\n\n  async createWallapopChat(insertChat: InsertWallapopChat): Promise<WallapopChat> {\n    const id = randomUUID();\n    const chat: WallapopChat = {\n      ...insertChat,\n      id,\n      lastMessage: null,\n      lastMessageAt: new Date(),\n      createdAt: new Date()\n    };\n    this.wallapopChats.set(id, chat);\n    return chat;\n  }\n\n  async getWallapopChats(userId: string): Promise<WallapopChat[]> {\n    return Array.from(this.wallapopChats.values())\n      .filter(chat => chat.buyerId === userId || chat.sellerId === userId)\n      .sort((a, b) => new Date(b.lastMessageAt!).getTime() - new Date(a.lastMessageAt!).getTime());\n  }\n\n  async createWallapopMessage(insertMessage: InsertWallapopMessage): Promise<WallapopMessage> {\n    const id = randomUUID();\n    const message: WallapopMessage = {\n      ...insertMessage,\n      id,\n      isRead: false,\n      createdAt: new Date()\n    };\n    this.wallapopMessages.set(id, message);\n    \n    // Update last message in chat\n    const chat = this.wallapopChats.get(insertMessage.chatId);\n    if (chat) {\n      chat.lastMessage = insertMessage.content;\n      chat.lastMessageAt = new Date();\n      this.wallapopChats.set(insertMessage.chatId, chat);\n    }\n    \n    return message;\n  }\n\n  async getWallapopMessages(chatId: string): Promise<WallapopMessage[]> {\n    return Array.from(this.wallapopMessages.values())\n      .filter(message => message.chatId === chatId)\n      .sort((a, b) => new Date(a.createdAt!).getTime() - new Date(b.createdAt!).getTime());\n  }\n\n  async getOrCreateWallapopChat(productId: string, buyerId: string, sellerId: string): Promise<WallapopChat> {\n    // Check if chat already exists for this product and buyer\n    const existingChat = Array.from(this.wallapopChats.values())\n      .find(chat => chat.productId === productId && chat.buyerId === buyerId);\n    \n    if (existingChat) {\n      return existingChat;\n    }\n    \n    // Create new chat\n    return this.createWallapopChat({\n      productId,\n      buyerId,\n      sellerId\n    });\n  }\n\n  // WhatsApp methods\n  async getWhatsappUser(id: string): Promise<WhatsappUser | undefined> {\n    return this.whatsappUsers.get(id);\n  }\n\n  async getWhatsappUserByPhone(phone: string): Promise<WhatsappUser | undefined> {\n    return Array.from(this.whatsappUsers.values()).find(user => user.phone === phone);\n  }\n\n  async createWhatsappUser(insertUser: InsertWhatsappUser): Promise<WhatsappUser> {\n    const id = randomUUID();\n    const user: WhatsappUser = {\n      ...insertUser,\n      id,\n      status: insertUser.status || \"Hey there! I am using WhatsApp.\",\n      lastSeen: new Date(),\n      createdAt: new Date()\n    };\n    this.whatsappUsers.set(id, user);\n    return user;\n  }\n\n  async getWhatsappUsers(): Promise<WhatsappUser[]> {\n    return Array.from(this.whatsappUsers.values());\n  }\n\n  async createWhatsappChat(insertChat: InsertWhatsappChat): Promise<WhatsappChat> {\n    const id = randomUUID();\n    const chat: WhatsappChat = {\n      ...insertChat,\n      id,\n      createdAt: new Date()\n    };\n    this.whatsappChats.set(id, chat);\n    return chat;\n  }\n\n  async getWhatsappChatsByPhone(phone: string): Promise<WhatsappChat[]> {\n    return Array.from(this.whatsappChats.values())\n      .filter(chat => chat.participants.includes(phone));\n  }\n\n  async getOrCreateWhatsappChat(participants: string[]): Promise<WhatsappChat> {\n    // Sort participants to ensure consistent chat lookup\n    const sortedParticipants = participants.sort();\n    \n    // Find existing chat with same participants\n    const existingChat = Array.from(this.whatsappChats.values())\n      .find(chat => {\n        const sortedChatParticipants = [...chat.participants].sort();\n        return JSON.stringify(sortedChatParticipants) === JSON.stringify(sortedParticipants);\n      });\n    \n    if (existingChat) {\n      return existingChat;\n    }\n    \n    // Create new chat\n    return this.createWhatsappChat({ participants });\n  }\n\n  async createWhatsappMessage(insertMessage: InsertWhatsappMessage): Promise<WhatsappMessage> {\n    const id = randomUUID();\n    const message: WhatsappMessage = {\n      ...insertMessage,\n      id,\n      messageType: insertMessage.messageType || \"text\",\n      sentAt: new Date()\n    };\n    this.whatsappMessages.set(id, message);\n    return message;\n  }\n\n  async getWhatsappMessages(chatId: string): Promise<WhatsappMessage[]> {\n    return Array.from(this.whatsappMessages.values())\n      .filter(message => message.chatId === chatId)\n      .sort((a, b) => new Date(a.sentAt!).getTime() - new Date(b.sentAt!).getTime());\n  }\n\n  // Dark Web methods\n  async getDarkwebUser(id: string): Promise<DarkwebUser | undefined> {\n    return this.darkwebUsers.get(id);\n  }\n\n  async getDarkwebUserByHandle(handle: string): Promise<DarkwebUser | undefined> {\n    return Array.from(this.darkwebUsers.values()).find(user => user.handle === handle);\n  }\n\n  async createDarkwebUser(insertUser: InsertDarkwebUser): Promise<DarkwebUser> {\n    const id = randomUUID();\n    const hashedPassword = await CryptoService.hashPassword(insertUser.passwordHash);\n    const user: DarkwebUser = {\n      ...insertUser,\n      id,\n      passwordHash: hashedPassword,\n      reputation: 0,\n      isOnline: true,\n      lastSeen: new Date(),\n      createdAt: new Date()\n    };\n    this.darkwebUsers.set(id, user);\n    return user;\n  }\n\n  async verifyDarkwebPassword(handle: string, password: string): Promise<DarkwebUser | null> {\n    const user = await this.getDarkwebUserByHandle(handle);\n    if (!user) return null;\n    \n    const isValid = await CryptoService.verifyPassword(password, user.passwordHash);\n    if (isValid) {\n      // Update last seen and online status\n      user.lastSeen = new Date();\n      user.isOnline = true;\n      this.darkwebUsers.set(user.id, user);\n      return user;\n    }\n    return null;\n  }\n\n  async getDarkwebChannels(): Promise<DarkwebChannel[]> {\n    return Array.from(this.darkwebChannels.values())\n      .filter(channel => !channel.isPrivate || !channel.accessCode)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createDarkwebChannel(insertChannel: InsertDarkwebChannel): Promise<DarkwebChannel> {\n    const id = randomUUID();\n    const channel: DarkwebChannel = {\n      ...insertChannel,\n      id,\n      createdAt: new Date()\n    };\n    this.darkwebChannels.set(id, channel);\n    return channel;\n  }\n\n  async getDarkwebChannel(id: string): Promise<DarkwebChannel | undefined> {\n    return this.darkwebChannels.get(id);\n  }\n\n  async createDarkwebMessage(insertMessage: InsertDarkwebMessage): Promise<DarkwebMessage> {\n    const id = randomUUID();\n    const message: DarkwebMessage = {\n      ...insertMessage,\n      id,\n      sentAt: new Date()\n    };\n    this.darkwebMessages.set(id, message);\n    return message;\n  }\n\n  async getDarkwebMessages(channelId: string): Promise<DarkwebMessage[]> {\n    return Array.from(this.darkwebMessages.values())\n      .filter(message => message.channelId === channelId)\n      .sort((a, b) => new Date(a.sentAt!).getTime() - new Date(b.sentAt!).getTime());\n  }\n\n  async updateUserOnlineStatus(userId: string, isOnline: boolean): Promise<void> {\n    const user = this.darkwebUsers.get(userId);\n    if (user) {\n      user.isOnline = isOnline;\n      user.lastSeen = new Date();\n      this.darkwebUsers.set(userId, user);\n    }\n  }\n\n  // Admin System Implementation\n  async getAdminUser(id: string): Promise<AdminUser | undefined> {\n    return this.adminUsers.get(id);\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(user => user.username === username);\n  }\n\n  async createAdminUser(insertUser: InsertAdminUser): Promise<AdminUser> {\n    const id = randomUUID();\n    const hashedPassword = await CryptoService.hashPassword(insertUser.password);\n    const user: AdminUser = {\n      ...insertUser,\n      id,\n      password: hashedPassword,\n      createdAt: new Date(),\n      usedAt: null\n    };\n    this.adminUsers.set(id, user);\n    return user;\n  }\n\n  async verifyAdminPassword(username: string, password: string): Promise<AdminUser | null> {\n    const user = await this.getAdminUserByUsername(username);\n    if (!user) return null;\n    \n    // Check if it's a one-time use admin that's already been used\n    if (user.isOneTimeUse && user.isUsed) {\n      return null;\n    }\n\n    const isValid = await CryptoService.verifyPassword(password, user.password);\n    if (isValid) {\n      return user;\n    }\n    return null;\n  }\n\n  async markAdminUserAsUsed(id: string): Promise<void> {\n    const user = this.adminUsers.get(id);\n    if (user && user.isOneTimeUse) {\n      user.isUsed = true;\n      user.usedAt = new Date();\n      this.adminUsers.set(id, user);\n    }\n  }\n\n  async createRegistrationCode(insertCode: InsertRegistrationCode): Promise<RegistrationCode> {\n    const id = randomUUID();\n    const code: RegistrationCode = {\n      ...insertCode,\n      id,\n      createdAt: new Date(),\n      usedAt: null\n    };\n    this.registrationCodes.set(insertCode.code, code);\n    return code;\n  }\n\n  async getRegistrationCode(code: string): Promise<RegistrationCode | undefined> {\n    return this.registrationCodes.get(code);\n  }\n\n  async getRegistrationCodesByAdmin(adminId: string): Promise<RegistrationCode[]> {\n    return Array.from(this.registrationCodes.values())\n      .filter(code => code.createdBy === adminId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async markRegistrationCodeAsUsed(code: string, usedBy: string): Promise<void> {\n    const regCode = this.registrationCodes.get(code);\n    if (regCode && !regCode.isUsed) {\n      regCode.isUsed = true;\n      regCode.usedBy = usedBy;\n      regCode.usedAt = new Date();\n      this.registrationCodes.set(code, regCode);\n    }\n  }\n\n  async getUnusedRegistrationCodes(appType?: string): Promise<RegistrationCode[]> {\n    return Array.from(this.registrationCodes.values())\n      .filter(code => !code.isUsed && (!appType || code.appType === appType))\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":30697},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Instagram Users\nexport const instagramUsers = pgTable(\"instagram_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"),\n  bio: text(\"bio\"),\n  profileImage: text(\"profile_image\"),\n  verified: boolean(\"verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const instagramPosts = pgTable(\"instagram_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => instagramUsers.id).notNull(),\n  mediaUrls: jsonb(\"media_urls\").$type<string[]>().notNull(),\n  mediaType: text(\"media_type\").default(\"image\"), // 'image' or 'video'\n  caption: text(\"caption\"),\n  likes: integer(\"likes\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const instagramComments = pgTable(\"instagram_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => instagramPosts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => instagramUsers.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const instagramFollows = pgTable(\"instagram_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").references(() => instagramUsers.id).notNull(),\n  followingId: varchar(\"following_id\").references(() => instagramUsers.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const instagramStories = pgTable(\"instagram_stories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => instagramUsers.id).notNull(),\n  mediaUrl: text(\"media_url\").notNull(),\n  mediaType: text(\"media_type\").default(\"image\"),\n  caption: text(\"caption\"),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tinder Users\nexport const tinderUsers = pgTable(\"tinder_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  age: integer(\"age\").notNull(),\n  bio: text(\"bio\"),\n  photos: jsonb(\"photos\").$type<string[]>().default([]),\n  interests: jsonb(\"interests\").$type<string[]>().default([]),\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const tinderMatches = pgTable(\"tinder_matches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user1Id: varchar(\"user1_id\").references(() => tinderUsers.id).notNull(),\n  user2Id: varchar(\"user2_id\").references(() => tinderUsers.id).notNull(),\n  isMatch: boolean(\"is_match\").default(false),\n  swipedAt: timestamp(\"swiped_at\").defaultNow(),\n});\n\n// Wallapop Users  \nexport const wallapopUsers = pgTable(\"wallapop_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  location: text(\"location\").notNull(),\n  rating: integer(\"rating\").default(5),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wallapopProducts = pgTable(\"wallapop_products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sellerId: varchar(\"seller_id\").references(() => wallapopUsers.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // in cents\n  category: text(\"category\"),\n  condition: text(\"condition\"),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  location: text(\"location\"),\n  views: integer(\"views\").default(0),\n  sold: boolean(\"sold\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wallapopChats = pgTable(\"wallapop_chats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").references(() => wallapopProducts.id).notNull(),\n  buyerId: varchar(\"buyer_id\").references(() => wallapopUsers.id).notNull(),\n  sellerId: varchar(\"seller_id\").references(() => wallapopUsers.id).notNull(),\n  lastMessage: text(\"last_message\"),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wallapopMessages = pgTable(\"wallapop_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chatId: varchar(\"chat_id\").references(() => wallapopChats.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => wallapopUsers.id).notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// WhatsApp Users\nexport const whatsappUsers = pgTable(\"whatsapp_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phone: text(\"phone\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  profileImage: text(\"profile_image\"),\n  status: text(\"status\").default(\"Hey there! I am using WhatsApp.\"),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const whatsappChats = pgTable(\"whatsapp_chats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  participants: jsonb(\"participants\").$type<string[]>().notNull(), // phone numbers\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const whatsappMessages = pgTable(\"whatsapp_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chatId: varchar(\"chat_id\").references(() => whatsappChats.id).notNull(),\n  senderPhone: text(\"sender_phone\").notNull(),\n  content: text(\"content\").notNull(),\n  messageType: text(\"message_type\").default(\"text\"), // text, image, etc\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n});\n\n// Dark Web Anonymous Messaging\nexport const darkwebUsers = pgTable(\"darkweb_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  handle: text(\"handle\").notNull().unique(), // Anonymous handle like \"AnonymousUser123\"\n  passwordHash: text(\"password_hash\").notNull(),\n  reputation: integer(\"reputation\").default(0),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const darkwebChannels = pgTable(\"darkweb_channels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  isPrivate: boolean(\"is_private\").default(false),\n  accessCode: text(\"access_code\"), // For private channels\n  createdBy: varchar(\"created_by\").references(() => darkwebUsers.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const darkwebMessages = pgTable(\"darkweb_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  channelId: varchar(\"channel_id\").references(() => darkwebChannels.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => darkwebUsers.id).notNull(),\n  content: text(\"content\").notNull(),\n  messageType: text(\"message_type\").default(\"text\"), // text, encrypted, image\n  attachmentUrl: text(\"attachment_url\"), // For image attachments\n  isEncrypted: boolean(\"is_encrypted\").default(false),\n  replyToId: varchar(\"reply_to_id\"),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n});\n\n// Admin System\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  isOneTimeUse: boolean(\"is_one_time_use\").default(true),\n  isUsed: boolean(\"is_used\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  usedAt: timestamp(\"used_at\"),\n});\n\nexport const registrationCodes = pgTable(\"registration_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  isUsed: boolean(\"is_used\").default(false),\n  usedBy: text(\"used_by\"),\n  appType: text(\"app_type\").notNull(), // 'instagram', 'tinder', 'wallapop', 'whatsapp', 'darkweb'\n  createdBy: varchar(\"created_by\").references(() => adminUsers.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  usedAt: timestamp(\"used_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\n// Insert schemas\nexport const insertInstagramUserSchema = createInsertSchema(instagramUsers).omit({ id: true, createdAt: true });\nexport const insertInstagramPostSchema = createInsertSchema(instagramPosts).omit({ id: true, likes: true, commentsCount: true, createdAt: true });\nexport const insertInstagramCommentSchema = createInsertSchema(instagramComments).omit({ id: true, createdAt: true });\nexport const insertInstagramFollowSchema = createInsertSchema(instagramFollows).omit({ id: true, createdAt: true });\nexport const insertInstagramStorySchema = createInsertSchema(instagramStories).omit({ id: true, createdAt: true });\nexport const insertTinderUserSchema = createInsertSchema(tinderUsers).omit({ id: true, createdAt: true });\nexport const insertTinderMatchSchema = createInsertSchema(tinderMatches).omit({ id: true, swipedAt: true });\nexport const insertWallapopUserSchema = createInsertSchema(wallapopUsers).omit({ id: true, rating: true, createdAt: true });\nexport const insertWallapopProductSchema = createInsertSchema(wallapopProducts).omit({ id: true, views: true, sold: true, createdAt: true });\nexport const insertWallapopChatSchema = createInsertSchema(wallapopChats).omit({ id: true, lastMessage: true, lastMessageAt: true, createdAt: true });\nexport const insertWallapopMessageSchema = createInsertSchema(wallapopMessages).omit({ id: true, isRead: true, createdAt: true });\nexport const insertWhatsappUserSchema = createInsertSchema(whatsappUsers).omit({ id: true, lastSeen: true, createdAt: true });\nexport const insertWhatsappChatSchema = createInsertSchema(whatsappChats).omit({ id: true, createdAt: true });\nexport const insertWhatsappMessageSchema = createInsertSchema(whatsappMessages).omit({ id: true, sentAt: true });\nexport const insertDarkwebUserSchema = createInsertSchema(darkwebUsers).omit({ id: true, reputation: true, isOnline: true, lastSeen: true, createdAt: true });\nexport const insertDarkwebChannelSchema = createInsertSchema(darkwebChannels).omit({ id: true, createdAt: true });\nexport const insertDarkwebMessageSchema = createInsertSchema(darkwebMessages).omit({ id: true, sentAt: true });\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({ id: true, createdAt: true, usedAt: true });\nexport const insertRegistrationCodeSchema = createInsertSchema(registrationCodes).omit({ id: true, createdAt: true, usedAt: true });\n\n// Types\nexport type InstagramUser = typeof instagramUsers.$inferSelect;\nexport type InsertInstagramUser = z.infer<typeof insertInstagramUserSchema>;\nexport type InstagramPost = typeof instagramPosts.$inferSelect;\nexport type InsertInstagramPost = z.infer<typeof insertInstagramPostSchema>;\nexport type InstagramComment = typeof instagramComments.$inferSelect;\nexport type InsertInstagramComment = z.infer<typeof insertInstagramCommentSchema>;\nexport type InstagramFollow = typeof instagramFollows.$inferSelect;\nexport type InsertInstagramFollow = z.infer<typeof insertInstagramFollowSchema>;\nexport type InstagramStory = typeof instagramStories.$inferSelect;\nexport type InsertInstagramStory = z.infer<typeof insertInstagramStorySchema>;\n\nexport type TinderUser = typeof tinderUsers.$inferSelect;\nexport type InsertTinderUser = z.infer<typeof insertTinderUserSchema>;\nexport type TinderMatch = typeof tinderMatches.$inferSelect;\nexport type InsertTinderMatch = z.infer<typeof insertTinderMatchSchema>;\n\nexport type WallapopUser = typeof wallapopUsers.$inferSelect;\nexport type InsertWallapopUser = z.infer<typeof insertWallapopUserSchema>;\nexport type WallapopProduct = typeof wallapopProducts.$inferSelect;\nexport type InsertWallapopProduct = z.infer<typeof insertWallapopProductSchema>;\nexport type WallapopChat = typeof wallapopChats.$inferSelect;\nexport type InsertWallapopChat = z.infer<typeof insertWallapopChatSchema>;\nexport type WallapopMessage = typeof wallapopMessages.$inferSelect;\nexport type InsertWallapopMessage = z.infer<typeof insertWallapopMessageSchema>;\n\nexport type WhatsappUser = typeof whatsappUsers.$inferSelect;\nexport type InsertWhatsappUser = z.infer<typeof insertWhatsappUserSchema>;\nexport type WhatsappChat = typeof whatsappChats.$inferSelect;\nexport type InsertWhatsappChat = z.infer<typeof insertWhatsappChatSchema>;\nexport type WhatsappMessage = typeof whatsappMessages.$inferSelect;\nexport type InsertWhatsappMessage = z.infer<typeof insertWhatsappMessageSchema>;\n\nexport type DarkwebUser = typeof darkwebUsers.$inferSelect;\nexport type InsertDarkwebUser = z.infer<typeof insertDarkwebUserSchema>;\nexport type DarkwebChannel = typeof darkwebChannels.$inferSelect;\nexport type InsertDarkwebChannel = z.infer<typeof insertDarkwebChannelSchema>;\nexport type DarkwebMessage = typeof darkwebMessages.$inferSelect;\nexport type InsertDarkwebMessage = z.infer<typeof insertDarkwebMessageSchema>;\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type RegistrationCode = typeof registrationCodes.$inferSelect;\nexport type InsertRegistrationCode = z.infer<typeof insertRegistrationCodeSchema>;\n","size_bytes":13783},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport PhoneSimulator from \"@/pages/phone-simulator\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={PhoneSimulator} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":730},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco Display', 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --radius: 0.75rem;\n  --phone-gradient: linear-gradient(135deg, hsl(250, 80%, 60%) 0%, hsl(210, 90%, 60%) 50%, hsl(250, 80%, 70%) 100%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Phone simulator specific styles */\n.phone-container {\n  box-shadow: \n    0 25px 50px rgba(0, 0, 0, 0.3),\n    0 0 0 1px rgba(255, 255, 255, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2);\n}\n\n.phone-screen {\n  backdrop-filter: blur(10px);\n}\n\n/* App icon animations */\n.app-icon {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.app-icon:hover {\n  transform: scale(1.1) translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n}\n\n.app-icon:active {\n  transform: scale(0.95);\n}\n\n/* Instagram specific styles */\n.instagram-header {\n  background: linear-gradient(90deg, hsl(315, 100%, 72%) 0%, hsl(0, 100%, 64%) 50%, hsl(45, 100%, 64%) 100%);\n  background-clip: text;\n  -webkit-background-clip: text;\n}\n\n/* Tinder card styles */\n.tinder-card {\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.95) 100%);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n/* WhatsApp background pattern */\n.whatsapp-chat-bg {\n  background-color: hsl(49, 30%, 92%);\n  background-image: \n    radial-gradient(circle at 50% 50%, rgba(156, 163, 175, 0.1) 1px, transparent 1px);\n  background-size: 20px 20px;\n}\n\n/* Custom scrollbar for mobile feel */\n.app-content::-webkit-scrollbar {\n  display: none;\n}\n\n.app-content {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n/* Floating action button styles */\n.floating-add {\n  animation: float 3s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-6px); }\n}\n\n/* Message bubble styles */\n.message {\n  position: relative;\n  word-wrap: break-word;\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.message.sent::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  right: -8px;\n  width: 0;\n  height: 0;\n  border: 4px solid transparent;\n  border-left-color: hsl(120, 60%, 85%);\n  border-bottom: 0;\n}\n\n.message.received::after {\n  content: '';\n  position: absolute;\n  bottom: 0;\n  left: -8px;\n  width: 0;\n  height: 0;\n  border: 4px solid transparent;\n  border-right-color: white;\n  border-bottom: 0;\n}\n\n/* Loading animations */\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Status indicators */\n.online-indicator {\n  width: 8px;\n  height: 8px;\n  background: hsl(120, 60%, 50%);\n  border-radius: 50%;\n  animation: pulse-green 2s infinite;\n}\n\n@keyframes pulse-green {\n  0% {\n    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.7);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(34, 197, 94, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(34, 197, 94, 0);\n  }\n}\n\n/* Responsive adjustments */\n@media (max-width: 480px) {\n  .phone-container {\n    width: 90vw;\n    height: 90vh;\n    max-width: 375px;\n    max-height: 812px;\n  }\n}\n\n/* Glass morphism effects */\n.glassmorphism {\n  background: rgba(255, 255, 255, 0.25);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n}\n\n/* Product grid layout improvements */\n.product-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1rem;\n}\n\n/* Interactive elements */\n.touch-feedback {\n  transition: all 0.1s ease;\n}\n\n.touch-feedback:active {\n  transform: scale(0.98);\n  opacity: 0.8;\n}\n\n/* Typography improvements */\n.app-title {\n  font-family: var(--font-sans);\n  font-weight: 700;\n  letter-spacing: -0.025em;\n}\n\n.status-text {\n  font-family: var(--font-mono);\n  font-size: 0.75rem;\n  font-weight: 500;\n}\n","size_bytes":7003},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/phone-frame.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface PhoneFrameProps {\n  children: React.ReactNode;\n}\n\nexport default function PhoneFrame({ children }: PhoneFrameProps) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"phone-container w-[375px] h-[812px] bg-black rounded-[40px] p-2 shadow-2xl\">\n      <div className=\"phone-screen w-full h-full bg-black rounded-[32px] overflow-hidden relative\">\n        {/* Status Bar */}\n        <div className=\"status-bar h-11 bg-black flex justify-between items-center px-5 text-white text-sm font-semibold\">\n          <div>\n            {currentTime.toLocaleTimeString('es-ES', { \n              hour: '2-digit', \n              minute: '2-digit' \n            })}\n          </div>\n          <div className=\"flex gap-1\">\n            <i className=\"fas fa-signal text-xs\"></i>\n            <i className=\"fas fa-wifi text-xs\"></i>\n            <i className=\"fas fa-battery-three-quarters text-xs\"></i>\n          </div>\n        </div>\n\n        {/* App Content */}\n        <div className=\"app-content h-[calc(100%-44px)] bg-white\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1332},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-phone-storage.ts":{"content":"import { useState, useEffect } from \"react\";\n\n// Hook for managing phone app data storage\nexport function usePhoneStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\n// Hook for managing current user sessions across apps\nexport function useCurrentUser() {\n  const [currentUser, setCurrentUser] = usePhoneStorage('zona_cero_current_user', null);\n\n  const logout = () => {\n    setCurrentUser(null);\n    // Clear all app-specific storage\n    const keysToRemove = [\n      'zona_cero_current_user',\n      'zona_cero_instagram_session',\n      'zona_cero_tinder_session',\n      'zona_cero_wallapop_session',\n      'zona_cero_whatsapp_session'\n    ];\n    \n    keysToRemove.forEach(key => {\n      try {\n        window.localStorage.removeItem(key);\n      } catch (error) {\n        console.error(`Error removing localStorage key \"${key}\":`, error);\n      }\n    });\n  };\n\n  return { currentUser, setCurrentUser, logout };\n}\n","size_bytes":1617},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/fileUtils.ts":{"content":"// Utility functions for handling file uploads and conversion\n\nexport const convertFileToBase64 = (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = error => reject(error);\n  });\n};\n\nexport const validateImageFile = (file: File): boolean => {\n  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  \n  if (!validTypes.includes(file.type)) {\n    throw new Error('Tipo de archivo no válido. Solo se permiten: JPEG, PNG, GIF, WebP');\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error('El archivo es demasiado grande. Máximo 5MB permitido');\n  }\n  \n  return true;\n};\n\nexport const validateVideoFile = (file: File): boolean => {\n  const validTypes = ['video/mp4', 'video/mpeg', 'video/quicktime', 'video/webm'];\n  const maxSize = 50 * 1024 * 1024; // 50MB\n  \n  if (!validTypes.includes(file.type)) {\n    throw new Error('Tipo de archivo no válido. Solo se permiten: MP4, MPEG, QuickTime, WebM');\n  }\n  \n  if (file.size > maxSize) {\n    throw new Error('El archivo es demasiado grande. Máximo 50MB permitido');\n  }\n  \n  return true;\n};\n\nexport const compressImage = async (file: File, maxWidth: number = 800, quality: number = 0.8): Promise<string> => {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    const img = new Image();\n    \n    img.onload = () => {\n      // Calculate new dimensions\n      let { width, height } = img;\n      if (width > maxWidth) {\n        height = (height * maxWidth) / width;\n        width = maxWidth;\n      }\n      \n      canvas.width = width;\n      canvas.height = height;\n      \n      // Draw and compress\n      ctx.drawImage(img, 0, 0, width, height);\n      const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedDataUrl);\n    };\n    \n    img.src = URL.createObjectURL(file);\n  });\n};","size_bytes":2097},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/phone-simulator.tsx":{"content":"import { useState } from \"react\";\nimport PhoneFrame from \"@/components/phone-frame\";\nimport HomeScreen from \"@/components/apps/home-screen\";\nimport Instagram from \"@/components/apps/instagram\";\nimport Tinder from \"@/components/apps/tinder\";\nimport Wallapop from \"@/components/apps/wallapop\";\nimport WhatsApp from \"@/components/apps/whatsapp\";\nimport Darkweb from \"@/components/apps/darkweb\";\nimport FlappyBird from \"@/components/apps/flappy-bird\";\nimport Admin from \"@/components/apps/admin\";\n\nexport type AppType = \"home\" | \"instagram\" | \"tinder\" | \"wallapop\" | \"whatsapp\" | \"darkweb\" | \"flappybird\" | \"admin\";\n\nexport default function PhoneSimulator() {\n  const [currentApp, setCurrentApp] = useState<AppType>(\"home\");\n\n  const renderApp = () => {\n    switch (currentApp) {\n      case \"instagram\":\n        return <Instagram onBack={() => setCurrentApp(\"home\")} />;\n      case \"tinder\":\n        return <Tinder onBack={() => setCurrentApp(\"home\")} />;\n      case \"wallapop\":\n        return <Wallapop onBack={() => setCurrentApp(\"home\")} />;\n      case \"whatsapp\":\n        return <WhatsApp onBack={() => setCurrentApp(\"home\")} />;\n      case \"darkweb\":\n        return <Darkweb onBack={() => setCurrentApp(\"home\")} />;\n      case \"flappybird\":\n        return <FlappyBird onBack={() => setCurrentApp(\"home\")} />;\n      case \"admin\":\n        return <Admin onBack={() => setCurrentApp(\"home\")} />;\n      default:\n        return <HomeScreen onAppSelect={setCurrentApp} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-purple-700 flex items-center justify-center p-4\">\n      <div className=\"fixed top-6 left-1/2 transform -translate-x-1/2 z-50\">\n        <div className=\"bg-black/70 text-white px-4 py-2 rounded-full text-sm font-semibold backdrop-blur-sm\">\n          <i className=\"fas fa-gamepad mr-2\"></i>\n          Zona Cero RP\n        </div>\n      </div>\n      \n      <PhoneFrame>\n        {renderApp()}\n      </PhoneFrame>\n    </div>\n  );\n}\n","size_bytes":1998},"client/src/components/apps/darkweb.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Hash, Users, Shield, Eye, Send, Plus, Lock, Camera, Image } from \"lucide-react\";\nimport { validateImageFile, compressImage } from \"@/lib/fileUtils\";\nimport type { DarkwebUser, DarkwebChannel } from \"@shared/schema\";\n\ninterface DarkwebProps {\n  onBack: () => void;\n}\n\nexport default function Darkweb({ onBack }: DarkwebProps) {\n  const [currentUser, setCurrentUser] = useState<DarkwebUser | null>(null);\n  const [showRegister, setShowRegister] = useState(true);\n  const [selectedChannel, setSelectedChannel] = useState<any>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [uploadingImage, setUploadingImage] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const { data: channels } = useQuery({\n    queryKey: [\"/api/darkweb/channels\"],\n    enabled: !!currentUser,\n  });\n\n  const { data: messages } = useQuery({\n    queryKey: [\"/api/darkweb/channels\", selectedChannel?.id, \"messages\"],\n    enabled: !!selectedChannel,\n    refetchInterval: 2000, // Refresh every 2 seconds for real-time feel\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/darkweb/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"Acceso concedido\", description: \"Conectado a la red anónima\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/darkweb/channels\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Acceso denegado\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/darkweb/login\", loginData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"Reconectado\", description: `Bienvenido de vuelta, ${data.user.handle}` });\n      queryClient.invalidateQueries({ queryKey: [\"/api/darkweb/channels\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Acceso denegado\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      const response = await apiRequest(\"POST\", `/api/darkweb/channels/${selectedChannel.id}/messages`, messageData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/darkweb/channels\", selectedChannel?.id, \"messages\"] });\n    },\n  });\n\n  const createChannelMutation = useMutation({\n    mutationFn: async (channelData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/darkweb/channels\", channelData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Canal creado\", description: \"El nuevo canal está listo\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/darkweb/channels\"] });\n    },\n  });\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      handle: formData.get(\"handle\"),\n      passwordHash: formData.get(\"password\"), // Will be hashed on server\n      registrationCode: formData.get(\"registrationCode\"),\n    });\n  };\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      handle: formData.get(\"handle\"),\n      password: formData.get(\"password\"),\n    });\n  };\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    \n    setUploadingImage(true);\n    \n    try {\n      validateImageFile(file);\n      const compressedImage = await compressImage(file);\n      setSelectedImage(compressedImage);\n      toast({ title: \"Imagen cargada\", description: \"Lista para enviar\" });\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setUploadingImage(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if ((!messageInput.trim() && !selectedImage) || !currentUser) return;\n    \n    const messageData: any = {\n      senderId: currentUser.id,\n      content: messageInput || \"[Imagen adjunta]\",\n      messageType: selectedImage ? \"image\" : \"text\",\n      isEncrypted: false,\n    };\n\n    if (selectedImage) {\n      messageData.attachmentUrl = selectedImage;\n    }\n    \n    sendMessageMutation.mutate(messageData);\n    setSelectedImage(null);\n  };\n\n  const handleCreateChannel = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    createChannelMutation.mutate({\n      name: formData.get(\"name\"),\n      description: formData.get(\"description\"),\n      isPrivate: formData.get(\"isPrivate\") === \"on\",\n      accessCode: formData.get(\"accessCode\") || null,\n      createdBy: currentUser!.id,\n    });\n  };\n\n  // Simulate updating online status\n  useEffect(() => {\n    if (currentUser) {\n      const interval = setInterval(() => {\n        apiRequest(\"POST\", `/api/darkweb/users/${currentUser.id}/status`, { isOnline: true });\n      }, 30000); // Update every 30 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [currentUser]);\n\n  if (!currentUser) {\n    return (\n      <div className=\"h-full flex flex-col bg-black text-green-400\">\n        <div className=\"bg-gray-900 border-b border-green-500/30 flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer hover:text-green-300\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-mono font-bold text-green-400\">\n            DARK WEB\n          </h2>\n          <Shield className=\"text-green-400\" />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-black\">\n          <div className=\"bg-gray-900 border border-green-500/30 rounded-lg p-6 shadow-2xl w-full max-w-sm\">\n            <div className=\"text-center mb-6\">\n              <Shield className=\"mx-auto text-green-400 mb-4\" size={48} />\n              <h3 className=\"text-xl font-mono font-bold mb-2 text-green-400\">\n                {showRegister ? \"CREAR ACCESO\" : \"AUTENTICACIÓN\"}\n              </h3>\n              <p className=\"text-green-300/70 text-sm font-mono\">\n                {showRegister \n                  ? \"Regístrate para acceder a la red anónima\"\n                  : \"Ingresa tus credenciales de acceso\"\n                }\n              </p>\n            </div>\n\n            {showRegister ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <Input \n                  name=\"registrationCode\" \n                  placeholder=\"Código de acceso (admin)\" \n                  required \n                  className=\"bg-black border-red-500/50 text-red-400 placeholder:text-red-600 font-mono\"\n                  data-testid=\"input-registration-code\"\n                />\n                <Input \n                  name=\"handle\" \n                  placeholder=\"Handle anónimo (ej: Shadow_User)\" \n                  required \n                  className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n                  data-testid=\"input-handle\"\n                />\n                <Input \n                  name=\"password\" \n                  type=\"password\" \n                  placeholder=\"Contraseña segura\" \n                  required \n                  className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n                  data-testid=\"input-password\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700 text-black font-mono font-bold\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"CONECTANDO...\" : \"CREAR ACCESO\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input \n                  name=\"handle\" \n                  placeholder=\"Handle anónimo\" \n                  required \n                  className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n                  data-testid=\"input-login-handle\"\n                />\n                <Input \n                  name=\"password\" \n                  type=\"password\" \n                  placeholder=\"Contraseña\" \n                  required \n                  className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n                  data-testid=\"input-login-password\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700 text-black font-mono font-bold\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"AUTENTICANDO...\" : \"CONECTAR\"}\n                </Button>\n              </form>\n            )}\n\n            <p className=\"text-center mt-4 text-sm font-mono text-green-300/70\">\n              {showRegister ? \"¿Ya tienes acceso?\" : \"¿Necesitas acceso?\"}{\" \"}\n              <button\n                type=\"button\"\n                className=\"text-green-400 hover:text-green-300 underline\"\n                onClick={() => setShowRegister(!showRegister)}\n                data-testid=\"button-toggle-auth\"\n              >\n                {showRegister ? \"Conectar\" : \"Crear acceso\"}\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Channel View\n  if (selectedChannel) {\n    return (\n      <div className=\"h-full flex flex-col bg-black text-green-400\">\n        <div className=\"bg-gray-900 border-b border-green-500/30 flex items-center justify-between p-4\">\n          <ArrowLeft \n            className=\"cursor-pointer hover:text-green-300\" \n            onClick={() => setSelectedChannel(null)}\n          />\n          <div className=\"flex items-center gap-2\">\n            <Hash className=\"h-4 w-4\" />\n            <span className=\"font-mono font-bold\">{selectedChannel.name}</span>\n            {selectedChannel.isPrivate && <Lock className=\"h-4 w-4 text-red-400\" />}\n          </div>\n          <Users className=\"h-4 w-4\" />\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3 bg-black\">\n          {messages && Array.isArray(messages) && messages.length > 0 ? (\n            messages.map((message: any) => (\n              <div key={message.id} className=\"border-l-2 border-green-500/30 pl-3\">\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <span className=\"font-mono font-bold text-green-400\">\n                    {message.senderHandle}\n                  </span>\n                  <span className=\"text-green-600 text-xs font-mono\">\n                    {new Date(message.sentAt).toLocaleTimeString('es-ES', { \n                      hour: '2-digit', \n                      minute: '2-digit',\n                      second: '2-digit'\n                    })}\n                  </span>\n                  {message.isEncrypted && (\n                    <Shield className=\"h-3 w-3 text-yellow-400\" />\n                  )}\n                </div>\n                <div className=\"text-green-300 font-mono text-sm\">\n                  {message.messageType === \"image\" && message.attachmentUrl ? (\n                    <div className=\"space-y-2\">\n                      <img \n                        src={message.attachmentUrl} \n                        alt=\"Imagen adjunta\" \n                        className=\"max-w-full max-h-64 rounded border border-green-500/30 cursor-pointer hover:border-green-400\"\n                        onClick={() => window.open(message.attachmentUrl, '_blank')}\n                      />\n                      {message.content !== \"[Imagen adjunta]\" && (\n                        <div>{message.content}</div>\n                      )}\n                    </div>\n                  ) : (\n                    <div>{message.content}</div>\n                  )}\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center text-green-600 py-8 font-mono\">\n              Canal vacío. Sé el primero en enviar un mensaje.\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t border-green-500/30 p-4 bg-gray-900\">\n          {selectedImage && (\n            <div className=\"mb-3 p-2 bg-black border border-green-500/30 rounded\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-green-400 font-mono text-sm\">Imagen seleccionada:</span>\n                <Button \n                  onClick={() => setSelectedImage(null)}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-red-400 hover:text-red-300\"\n                >\n                  ✕\n                </Button>\n              </div>\n              <img \n                src={selectedImage} \n                alt=\"Preview\" \n                className=\"max-w-full max-h-24 rounded border border-green-500/50\"\n              />\n            </div>\n          )}\n          <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n            <div className=\"flex gap-1\">\n              <Button \n                type=\"button\"\n                onClick={() => fileInputRef.current?.click()}\n                disabled={uploadingImage}\n                className=\"bg-gray-600 hover:bg-gray-700 text-green-400 border border-green-500/50\"\n                data-testid=\"button-attach-image\"\n              >\n                {uploadingImage ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-green-400\"></div>\n                ) : (\n                  <Camera className=\"h-4 w-4\" />\n                )}\n              </Button>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageUpload}\n                className=\"hidden\"\n              />\n            </div>\n            <Input\n              value={messageInput}\n              onChange={(e) => setMessageInput(e.target.value)}\n              placeholder={selectedImage ? \"Añadir descripción (opcional)...\" : \"Escribe un mensaje anónimo...\"}\n              className=\"flex-1 bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n              data-testid=\"input-message\"\n            />\n            <Button \n              type=\"submit\" \n              disabled={(!messageInput.trim() && !selectedImage) || sendMessageMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700 text-black font-mono\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-black text-green-400\">\n      <div className=\"bg-gray-900 border-b border-green-500/30 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-main\"\n          className=\"cursor-pointer hover:text-green-300\" \n          onClick={onBack} \n        />\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-mono font-bold text-green-400\">DARK WEB</h2>\n          <span className=\"text-xs font-mono text-green-600\">\n            {currentUser.handle} • REP: {currentUser.reputation}\n          </span>\n        </div>\n        <Shield className=\"text-green-400\" />\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto bg-black\">\n        <div className=\"p-4\">\n          <div className=\"mb-4 text-center\">\n            <p className=\"text-green-300 font-mono text-sm mb-2\">\n              CANALES DISPONIBLES\n            </p>\n            <div className=\"h-px bg-green-500/30\"></div>\n          </div>\n\n          {channels && Array.isArray(channels) && channels.length > 0 ? (\n            <div className=\"space-y-3\">\n              {channels.map((channel: any) => (\n                <div \n                  key={channel.id} \n                  className=\"bg-gray-900 border border-green-500/30 rounded p-3 cursor-pointer hover:bg-gray-800 transition-colors\"\n                  onClick={() => setSelectedChannel(channel)}\n                  data-testid={`channel-${channel.id}`}\n                >\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Hash className=\"h-4 w-4 text-green-400\" />\n                    <span className=\"font-mono font-bold text-green-400\">\n                      {channel.name}\n                    </span>\n                    {channel.isPrivate && <Lock className=\"h-4 w-4 text-red-400\" />}\n                  </div>\n                  {channel.description && (\n                    <p className=\"text-green-300/70 text-sm font-mono\">\n                      {channel.description}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center text-green-600 py-8 font-mono\">\n              No hay canales disponibles\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Create Channel Button */}\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button\n            className=\"fixed bottom-20 right-6 w-14 h-14 rounded-full bg-green-600 hover:bg-green-700 text-black shadow-lg\"\n            data-testid=\"button-create-channel\"\n          >\n            <Plus className=\"h-6 w-6\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"bg-gray-900 border-green-500/30 text-green-400\">\n          <DialogHeader>\n            <DialogTitle className=\"font-mono text-green-400\">CREAR CANAL</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleCreateChannel} className=\"space-y-4\">\n            <Input \n              name=\"name\" \n              placeholder=\"Nombre del canal\" \n              required \n              className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n              data-testid=\"input-channel-name\"\n            />\n            <Textarea \n              name=\"description\" \n              placeholder=\"Descripción del canal\" \n              className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n              data-testid=\"input-channel-description\"\n            />\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"checkbox\"\n                name=\"isPrivate\"\n                id=\"isPrivate\"\n                className=\"rounded border-green-500/50\"\n              />\n              <label htmlFor=\"isPrivate\" className=\"text-sm font-mono text-green-300\">\n                Canal privado\n              </label>\n            </div>\n            <Input \n              name=\"accessCode\" \n              placeholder=\"Código de acceso (opcional)\" \n              className=\"bg-black border-green-500/50 text-green-400 placeholder:text-green-600 font-mono\"\n              data-testid=\"input-access-code\"\n            />\n            <Button \n              type=\"submit\" \n              disabled={createChannelMutation.isPending}\n              className=\"w-full bg-green-600 hover:bg-green-700 text-black font-mono font-bold\"\n              data-testid=\"button-submit-channel\"\n            >\n              {createChannelMutation.isPending ? \"CREANDO...\" : \"CREAR CANAL\"}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <div className=\"bg-gray-900 border-t border-green-500/30 p-2 text-center\">\n        <p className=\"text-green-600 text-xs font-mono\">\n          CONEXIÓN SEGURA • TOR ACTIVO • IP OCULTA\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":21023},"client/src/components/apps/home-screen.tsx":{"content":"import { AppType } from \"@/pages/phone-simulator\";\n\ninterface HomeScreenProps {\n  onAppSelect: (app: AppType) => void;\n}\n\nexport default function HomeScreen({ onAppSelect }: HomeScreenProps) {\n  const apps = [\n    {\n      id: \"instagram\",\n      name: \"Instagram\",\n      icon: \"fab fa-instagram\",\n      gradient: \"from-purple-600 via-pink-600 to-orange-400\"\n    },\n    {\n      id: \"tinder\",\n      name: \"Tinder\",\n      icon: \"fas fa-fire\",\n      gradient: \"from-pink-500 to-red-500\"\n    },\n    {\n      id: \"wallapop\",\n      name: \"Wallapop\",\n      icon: \"fas fa-shopping-bag\",\n      gradient: \"from-green-500 to-teal-500\"\n    },\n    {\n      id: \"whatsapp\",\n      name: \"WhatsApp\",\n      icon: \"fab fa-whatsapp\",\n      gradient: \"from-green-600 to-green-700\"\n    },\n    {\n      id: \"darkweb\",\n      name: \"Dark Web\",\n      icon: \"fas fa-shield-alt\",\n      gradient: \"from-gray-800 via-black to-green-900\"\n    },\n    {\n      id: \"flappybird\",\n      name: \"Flappy Bird\",\n      icon: \"fas fa-dove\",\n      gradient: \"from-yellow-400 via-orange-500 to-red-500\"\n    },\n    {\n      id: \"admin\",\n      name: \"Admin Panel\",\n      icon: \"fas fa-shield-alt\",\n      gradient: \"from-blue-600 via-purple-600 to-blue-800\"\n    }\n  ];\n\n  return (\n    <div className=\"home-screen h-full bg-gradient-to-br from-purple-600 via-blue-600 to-purple-700 p-10\">\n      <div className=\"grid grid-cols-3 gap-6 mt-10 justify-items-center\">\n        {apps.map((app) => (\n          <div key={app.id} className=\"app-container flex flex-col items-center\">\n            <div\n              data-testid={`app-icon-${app.id}`}\n              className={`app-icon w-15 h-15 rounded-xl bg-gradient-to-r ${app.gradient} flex items-center justify-center text-white text-2xl cursor-pointer transition-transform hover:scale-110 shadow-lg`}\n              onClick={() => onAppSelect(app.id as AppType)}\n            >\n              <i className={app.icon}></i>\n            </div>\n            <div className=\"app-name text-white text-xs mt-2 text-center font-medium drop-shadow-sm\">\n              {app.name}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2135},"client/src/components/apps/instagram.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, Heart, MessageCircle, Send, Camera, Video, UserPlus, UserMinus } from \"lucide-react\";\nimport { validateImageFile, validateVideoFile, compressImage, convertFileToBase64 } from \"@/lib/fileUtils\";\nimport type { InstagramUser, InstagramPost } from \"@shared/schema\";\n\ninterface InstagramProps {\n  onBack: () => void;\n}\n\nexport default function Instagram({ onBack }: InstagramProps) {\n  const [currentUser, setCurrentUser] = useState<InstagramUser | null>(null);\n  const [showRegister, setShowRegister] = useState(true);\n  const [selectedMedia, setSelectedMedia] = useState<string[]>([]);\n  const [mediaType, setMediaType] = useState<'image' | 'video'>('image');\n  const [uploadingMedia, setUploadingMedia] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<any>(null);\n  const [commentInput, setCommentInput] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const { data: posts, isLoading } = useQuery({\n    queryKey: [\"/api/instagram/posts\"],\n    enabled: !!currentUser,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/instagram/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Cuenta creada exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/instagram/login\", loginData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Bienvenido de vuelta!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createPostMutation = useMutation({\n    mutationFn: async (postData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/instagram/posts\", postData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"¡Post creado exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\"] });\n    },\n  });\n\n  const createCommentMutation = useMutation({\n    mutationFn: async (commentData: any) => {\n      const response = await apiRequest(\"POST\", `/api/instagram/posts/${commentData.postId}/comments`, commentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setCommentInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\"] });\n      if (selectedPost) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\", selectedPost.id, \"comments\"] });\n      }\n    },\n  });\n\n  const { data: comments } = useQuery({\n    queryKey: [\"/api/instagram/posts\", selectedPost?.id, \"comments\"],\n    enabled: !!selectedPost,\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async (postId: string) => {\n      const response = await apiRequest(\"POST\", `/api/instagram/posts/${postId}/like`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/instagram/posts\"] });\n    },\n  });\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      username: formData.get(\"username\"),\n      email: formData.get(\"email\"),\n      password: formData.get(\"password\"),\n      fullName: formData.get(\"fullName\"),\n      bio: formData.get(\"bio\"),\n      registrationCode: formData.get(\"registrationCode\"),\n    });\n  };\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      username: formData.get(\"username\"),\n      password: formData.get(\"password\"),\n    });\n  };\n\n  const handleMediaUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n    \n    setUploadingMedia(true);\n    const newMedia: string[] = [];\n    \n    try {\n      for (let i = 0; i < Math.min(files.length, 10 - selectedMedia.length); i++) {\n        const file = files[i];\n        \n        if (file.type.startsWith('image/')) {\n          validateImageFile(file);\n          const compressedImage = await compressImage(file);\n          newMedia.push(compressedImage);\n          setMediaType('image');\n        } else if (file.type.startsWith('video/')) {\n          validateVideoFile(file);\n          const videoDataUrl = await convertFileToBase64(file);\n          newMedia.push(videoDataUrl);\n          setMediaType('video');\n        }\n      }\n      \n      setSelectedMedia(prev => [...prev, ...newMedia]);\n      toast({ title: `${newMedia.length} archivo(s) añadido(s) exitosamente` });\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setUploadingMedia(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const removeMedia = (index: number) => {\n    setSelectedMedia(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleCreatePost = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    if (selectedMedia.length === 0) {\n      toast({ title: \"Error\", description: \"Debes subir al menos una imagen o video\", variant: \"destructive\" });\n      return;\n    }\n    \n    const formData = new FormData(e.currentTarget);\n    createPostMutation.mutate({\n      userId: currentUser!.id,\n      caption: formData.get(\"caption\"),\n      mediaUrls: selectedMedia,\n      mediaType,\n      location: formData.get(\"location\") || null,\n    });\n    \n    setSelectedMedia([]);\n  };\n\n  const handleCreateComment = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (commentInput.trim() && selectedPost && currentUser) {\n      createCommentMutation.mutate({\n        postId: selectedPost.id,\n        userId: currentUser.id,\n        content: commentInput,\n      });\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"instagram-header bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-semibold\">Instagram</h2>\n          <div />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-gray-50\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm w-full max-w-sm\">\n            <div className=\"text-center mb-6\">\n              <i className=\"fab fa-instagram text-4xl text-pink-600 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">\n                {showRegister ? \"Únete a Instagram\" : \"Iniciar Sesión\"}\n              </h3>\n              <p className=\"text-gray-600 text-sm\">\n                {showRegister \n                  ? \"Regístrate para ver fotos y videos de tus amigos\"\n                  : \"Inicia sesión en tu cuenta\"\n                }\n              </p>\n            </div>\n\n            {showRegister ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <Input \n                  name=\"registrationCode\" \n                  placeholder=\"Código de registro (proporcionado por admin)\" \n                  required \n                  data-testid=\"input-registration-code\"\n                  className=\"border-red-300 focus:border-red-500\"\n                />\n                <Input \n                  name=\"username\" \n                  placeholder=\"Nombre de usuario\" \n                  required \n                  data-testid=\"input-username\"\n                />\n                <Input \n                  name=\"email\" \n                  type=\"email\" \n                  placeholder=\"Email\" \n                  required \n                  data-testid=\"input-email\"\n                />\n                <Input \n                  name=\"password\" \n                  type=\"password\" \n                  placeholder=\"Contraseña\" \n                  required \n                  data-testid=\"input-password\"\n                />\n                <Input \n                  name=\"fullName\" \n                  placeholder=\"Nombre completo\" \n                  data-testid=\"input-fullname\"\n                />\n                <Textarea \n                  name=\"bio\" \n                  placeholder=\"Biografía\" \n                  data-testid=\"input-bio\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Registrando...\" : \"Registrarse\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input \n                  name=\"username\" \n                  placeholder=\"Usuario o email\" \n                  required \n                  data-testid=\"input-login-username\"\n                />\n                <Input \n                  name=\"password\" \n                  type=\"password\" \n                  placeholder=\"Contraseña\" \n                  required \n                  data-testid=\"input-login-password\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Ingresando...\" : \"Iniciar sesión\"}\n                </Button>\n              </form>\n            )}\n\n            <p className=\"text-center mt-4 text-sm\">\n              {showRegister ? \"¿Ya tienes cuenta?\" : \"¿No tienes cuenta?\"}{\" \"}\n              <button\n                type=\"button\"\n                className=\"text-blue-600 hover:underline\"\n                onClick={() => setShowRegister(!showRegister)}\n                data-testid=\"button-toggle-auth\"\n              >\n                {showRegister ? \"Iniciar sesión\" : \"Registrarse\"}\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"instagram-header bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-feed\"\n          className=\"cursor-pointer\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-semibold\">Instagram</h2>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Plus className=\"cursor-pointer\" data-testid=\"button-create-post\" />\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Nueva Publicación</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreatePost} className=\"space-y-4\">\n              <Textarea \n                name=\"caption\" \n                placeholder=\"Escribe una descripción...\" \n                data-testid=\"input-post-caption\"\n              />\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => fileInputRef.current?.click()}\n                    disabled={uploadingMedia || selectedMedia.length >= 10}\n                    data-testid=\"button-upload-media\"\n                  >\n                    {uploadingMedia ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600\"></div>\n                    ) : (\n                      <>\n                        <Camera className=\"h-4 w-4 mr-2\" />\n                        <Video className=\"h-4 w-4 mr-2\" />\n                      </>\n                    )}\n                    Subir archivos ({selectedMedia.length}/10)\n                  </Button>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*,video/*\"\n                    multiple\n                    onChange={handleMediaUpload}\n                    className=\"hidden\"\n                  />\n                </div>\n                \n                {selectedMedia.length > 0 && (\n                  <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto\">\n                    {selectedMedia.map((media, index) => (\n                      <div key={index} className=\"relative\">\n                        {media.startsWith('data:image/') ? (\n                          <img \n                            src={media} \n                            alt={`Media ${index + 1}`}\n                            className=\"w-full h-20 object-cover rounded\"\n                          />\n                        ) : (\n                          <video \n                            src={media}\n                            className=\"w-full h-20 object-cover rounded\"\n                          />\n                        )}\n                        <button\n                          type=\"button\"\n                          onClick={() => removeMedia(index)}\n                          className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                        >\n                          ×\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              <Input \n                name=\"location\" \n                placeholder=\"Añadir ubicación\" \n                data-testid=\"input-post-location\"\n              />\n              <Button \n                type=\"submit\" \n                disabled={createPostMutation.isPending}\n                data-testid=\"button-submit-post\"\n              >\n                {createPostMutation.isPending ? \"Publicando...\" : \"Publicar\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto bg-gray-50\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-600\"></div>\n          </div>\n        ) : posts && posts.length > 0 ? (\n          <div className=\"space-y-3\">\n            {posts.map((post: any) => (\n              <div key={post.id} className=\"bg-white border border-gray-200\">\n                <div className=\"flex items-center gap-3 p-4\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-purple-600 to-pink-600 flex items-center justify-center text-white text-sm font-semibold\">\n                    {post.username.charAt(0).toUpperCase()}\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-sm\">{post.username}</div>\n                    <div className=\"text-xs text-gray-500\">Zona Cero RP</div>\n                  </div>\n                </div>\n                <div className=\"w-full h-80 bg-gray-100 overflow-hidden\">\n                  {post.mediaUrls && post.mediaUrls.length > 0 && (\n                    post.mediaType === 'video' ? (\n                      <video \n                        src={post.mediaUrls[0]} \n                        className=\"w-full h-full object-cover\"\n                        controls\n                      />\n                    ) : (\n                      <img \n                        src={post.mediaUrls[0]} \n                        alt=\"Post\" \n                        className=\"w-full h-full object-cover\"\n                      />\n                    )\n                  )}\n                  \n                  {post.mediaUrls && post.mediaUrls.length > 1 && (\n                    <div className=\"absolute top-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-xs\">\n                      1/{post.mediaUrls.length}\n                    </div>\n                  )}\n                </div>\n                <div className=\"p-4\">\n                  <div className=\"flex gap-4 mb-3\">\n                    <Heart \n                      className=\"cursor-pointer hover:text-red-500\" \n                      onClick={() => likeMutation.mutate(post.id)}\n                      data-testid={`button-like-${post.id}`}\n                    />\n                    <MessageCircle \n                      className=\"cursor-pointer hover:text-blue-500\" \n                      onClick={() => setSelectedPost(post)}\n                      data-testid={`button-comments-${post.id}`}\n                    />\n                    <Send className=\"cursor-pointer hover:text-green-500\" />\n                  </div>\n                  <div className=\"font-semibold text-sm mb-2\" data-testid={`text-likes-${post.id}`}>\n                    {post.likes} Me gusta\n                  </div>\n                  {post.commentsCount > 0 && (\n                    <div className=\"text-sm text-gray-500 mb-2 cursor-pointer\" onClick={() => setSelectedPost(post)}>\n                      Ver los {post.commentsCount} comentarios\n                    </div>\n                  )}\n                  {post.caption && (\n                    <div className=\"text-sm mb-2\">\n                      <span className=\"font-semibold\">{post.username}</span>{\" \"}\n                      {post.caption}\n                    </div>\n                  )}\n                  {post.location && (\n                    <div className=\"text-xs text-gray-500 mb-2\">\n                      <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                      {post.location}\n                    </div>\n                  )}\n                  <div className=\"text-xs text-gray-400\">\n                    {new Date(post.createdAt).toLocaleDateString('es-ES')}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-gray-500\">\n            <i className=\"fas fa-camera text-4xl mb-4\"></i>\n            <p>No hay posts aún</p>\n            <p className=\"text-sm\">¡Sé el primero en publicar!</p>\n          </div>\n        )}\n      </div>\n\n      <div className=\"bg-white border-t border-gray-200 flex items-center justify-around py-3\">\n        <div className=\"flex flex-col items-center text-blue-600\">\n          <i className=\"fas fa-home text-lg\"></i>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <i className=\"fas fa-search text-lg\"></i>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <i className=\"fas fa-plus-square text-lg\"></i>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <i className=\"fas fa-heart text-lg\"></i>\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <i className=\"fas fa-user text-lg\"></i>\n        </div>\n      </div>\n      \n      {/* Comments Modal */}\n      {selectedPost && (\n        <Dialog open={!!selectedPost} onOpenChange={() => setSelectedPost(null)}>\n          <DialogContent className=\"max-w-lg max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Comentarios</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {/* Post preview */}\n              <div className=\"border-b pb-4\">\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <div className=\"w-8 h-8 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full flex items-center justify-center text-white text-sm font-bold\">\n                    {selectedPost.username?.charAt(0).toUpperCase()}\n                  </div>\n                  <span className=\"font-semibold\">{selectedPost.username}</span>\n                </div>\n                {selectedPost.caption && (\n                  <div className=\"text-sm text-gray-700\">\n                    {selectedPost.caption}\n                  </div>\n                )}\n              </div>\n              \n              {/* Comments list */}\n              <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                {comments && comments.length > 0 ? (\n                  comments.map((comment: any) => (\n                    <div key={comment.id} className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-gradient-to-r from-blue-400 to-green-400 rounded-full flex items-center justify-center text-white text-xs font-bold flex-shrink-0\">\n                        {comment.username?.charAt(0).toUpperCase()}\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"text-sm\">\n                          <span className=\"font-semibold\">{comment.username}</span>{\" \"}\n                          {comment.content}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(comment.createdAt).toLocaleDateString('es-ES')}\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    Aún no hay comentarios. ¡Sé el primero en comentar!\n                  </div>\n                )}\n              </div>\n              \n              {/* Add comment form */}\n              <form onSubmit={handleCreateComment} className=\"border-t pt-4\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={commentInput}\n                    onChange={(e) => setCommentInput(e.target.value)}\n                    placeholder=\"Escribe un comentario...\"\n                    className=\"flex-1\"\n                    data-testid=\"input-comment\"\n                  />\n                  <Button \n                    type=\"submit\" \n                    disabled={!commentInput.trim() || createCommentMutation.isPending}\n                    data-testid=\"button-submit-comment\"\n                  >\n                    {createCommentMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600\"></div>\n                    ) : (\n                      <Send className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":23644},"client/src/components/apps/tinder.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, X, Heart, Settings, Upload, Camera } from \"lucide-react\";\nimport { validateImageFile, compressImage } from \"@/lib/fileUtils\";\nimport type { TinderUser } from \"@shared/schema\";\n\ninterface TinderProps {\n  onBack: () => void;\n}\n\nexport default function Tinder({ onBack }: TinderProps) {\n  const [currentUser, setCurrentUser] = useState<TinderUser | null>(null);\n  const [showRegister, setShowRegister] = useState(true);\n  const [selectedPhotos, setSelectedPhotos] = useState<string[]>([]);\n  const [uploadingPhotos, setUploadingPhotos] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const { data: potentialMatches, isLoading } = useQuery({\n    queryKey: [\"/api/tinder/potential-matches\", currentUser?.id],\n    enabled: !!currentUser,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tinder/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Perfil creado exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tinder/potential-matches\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/tinder/login\", loginData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Bienvenido de vuelta!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tinder/potential-matches\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const swipeMutation = useMutation({\n    mutationFn: async ({ userId, targetUserId, isLike }: { userId: string; targetUserId: string; isLike: boolean }) => {\n      const response = await apiRequest(\"POST\", \"/api/tinder/swipe\", {\n        user1Id: userId,\n        user2Id: targetUserId,\n        isMatch: isLike,\n      });\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      if (variables.isLike) {\n        toast({ title: \"¡Es un Match! 💕\" });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/tinder/potential-matches\"] });\n    },\n  });\n\n  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n    \n    setUploadingPhotos(true);\n    const newPhotos: string[] = [];\n    \n    try {\n      for (let i = 0; i < Math.min(files.length, 6 - selectedPhotos.length); i++) {\n        const file = files[i];\n        validateImageFile(file);\n        const compressedPhoto = await compressImage(file);\n        newPhotos.push(compressedPhoto);\n      }\n      \n      setSelectedPhotos(prev => [...prev, ...newPhotos]);\n      toast({ title: `${newPhotos.length} foto(s) añadida(s) exitosamente` });\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setUploadingPhotos(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const removePhoto = (index: number) => {\n    setSelectedPhotos(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    if (selectedPhotos.length === 0) {\n      toast({ title: \"Error\", description: \"Debes subir al menos una foto\", variant: \"destructive\" });\n      return;\n    }\n    \n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      name: formData.get(\"name\"),\n      age: parseInt(formData.get(\"age\") as string),\n      bio: formData.get(\"bio\"),\n      photos: selectedPhotos,\n      interests: (formData.get(\"interests\") as string)?.split(',').map(i => i.trim()).filter(Boolean) || [],\n      location: formData.get(\"location\"),\n      registrationCode: formData.get(\"registrationCode\"),\n    });\n  };\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      name: formData.get(\"name\"),\n    });\n  };\n\n  const handleSwipe = (targetUserId: string, isLike: boolean) => {\n    if (currentUser) {\n      swipeMutation.mutate({\n        userId: currentUser.id,\n        targetUserId,\n        isLike,\n      });\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-semibold text-pink-500\">Tinder</h2>\n          <Settings className=\"cursor-pointer\" />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-gray-50\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm w-full max-w-sm\">\n            <div className=\"text-center mb-6\">\n              <i className=\"fas fa-fire text-4xl text-pink-500 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">\n                {showRegister ? \"Conoce gente nueva\" : \"Iniciar Sesión\"}\n              </h3>\n              <p className=\"text-gray-600 text-sm\">\n                {showRegister \n                  ? \"Regístrate para comenzar a hacer match\"\n                  : \"Inicia sesión en tu cuenta\"\n                }\n              </p>\n            </div>\n\n            {showRegister ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <Input \n                  name=\"registrationCode\" \n                  placeholder=\"Código de registro (proporcionado por admin)\" \n                  required \n                  data-testid=\"input-registration-code\"\n                  className=\"border-red-300 focus:border-red-500\"\n                />\n                <Input \n                  name=\"name\" \n                  placeholder=\"Nombre\" \n                  required \n                  data-testid=\"input-name\"\n                />\n                <Input \n                  name=\"age\" \n                  type=\"number\" \n                  placeholder=\"Edad\" \n                  min=\"18\" \n                  max=\"99\" \n                  required \n                  data-testid=\"input-age\"\n                />\n                <Textarea \n                  name=\"bio\" \n                  placeholder=\"Cuéntanos sobre ti...\" \n                  data-testid=\"input-bio\"\n                />\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button \n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => fileInputRef.current?.click()}\n                      disabled={uploadingPhotos || selectedPhotos.length >= 6}\n                      data-testid=\"button-upload-photos\"\n                    >\n                      {uploadingPhotos ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600\"></div>\n                      ) : (\n                        <Camera className=\"h-4 w-4\" />\n                      )}\n                      Subir fotos ({selectedPhotos.length}/6)\n                    </Button>\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      multiple\n                      onChange={handlePhotoUpload}\n                      className=\"hidden\"\n                    />\n                  </div>\n                  \n                  {selectedPhotos.length > 0 && (\n                    <div className=\"grid grid-cols-3 gap-2\">\n                      {selectedPhotos.map((photo, index) => (\n                        <div key={index} className=\"relative\">\n                          <img \n                            src={photo} \n                            alt={`Foto ${index + 1}`}\n                            className=\"w-full h-16 object-cover rounded\"\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => removePhoto(index)}\n                            className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                <Input \n                  name=\"interests\" \n                  placeholder=\"Intereses (separados por comas)\" \n                  data-testid=\"input-interests\"\n                />\n                <Input \n                  name=\"location\" \n                  placeholder=\"Ubicación\" \n                  data-testid=\"input-location\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-pink-500 hover:bg-pink-600\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Creando perfil...\" : \"Crear perfil\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input \n                  name=\"name\" \n                  placeholder=\"Nombre\" \n                  required \n                  data-testid=\"input-login-name\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-pink-500 hover:bg-pink-600\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Ingresando...\" : \"Ingresar\"}\n                </Button>\n              </form>\n            )}\n\n            <p className=\"text-center mt-4 text-sm\">\n              {showRegister ? \"¿Ya tienes cuenta?\" : \"¿No tienes cuenta?\"}{\" \"}\n              <button\n                type=\"button\"\n                className=\"text-pink-600 hover:underline\"\n                onClick={() => setShowRegister(!showRegister)}\n                data-testid=\"button-toggle-auth\"\n              >\n                {showRegister ? \"Iniciar sesión\" : \"Registrarse\"}\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentMatch = potentialMatches && potentialMatches.length > 0 ? potentialMatches[0] : null;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-cards\"\n          className=\"cursor-pointer\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-semibold text-pink-500\">Tinder</h2>\n        <Settings className=\"cursor-pointer\" />\n      </div>\n\n      <div className=\"flex-1 flex items-center justify-center p-4 bg-gray-100\">\n        {isLoading ? (\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-500\"></div>\n        ) : currentMatch ? (\n          <div className=\"tinder-card bg-white rounded-xl max-w-sm w-full h-96 shadow-lg overflow-hidden relative\">\n            <img \n              src={currentMatch.photos[0] || \"https://images.unsplash.com/photo-1494790108755-2616b612b5bc?w=400\"}\n              alt={currentMatch.name}\n              className=\"w-full h-72 object-cover\"\n            />\n            <div className=\"p-4\">\n              <h3 className=\"text-xl font-bold\">{currentMatch.name}, {currentMatch.age}</h3>\n              <p className=\"text-gray-600 text-sm mt-1\">{currentMatch.bio}</p>\n              {currentMatch.location && (\n                <p className=\"text-gray-500 text-xs mt-2\">\n                  <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                  {currentMatch.location}\n                </p>\n              )}\n            </div>\n            \n            <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-5\">\n              <button\n                onClick={() => handleSwipe(currentMatch.id, false)}\n                className=\"w-14 h-14 bg-gray-200 rounded-full flex items-center justify-center text-gray-600 hover:bg-gray-300 transition-colors\"\n                disabled={swipeMutation.isPending}\n                data-testid=\"button-pass\"\n              >\n                <X size={24} />\n              </button>\n              <button\n                onClick={() => handleSwipe(currentMatch.id, true)}\n                className=\"w-14 h-14 bg-pink-500 rounded-full flex items-center justify-center text-white hover:bg-pink-600 transition-colors\"\n                disabled={swipeMutation.isPending}\n                data-testid=\"button-like\"\n              >\n                <Heart size={24} />\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center\">\n            <i className=\"fas fa-heart text-4xl text-gray-400 mb-4\"></i>\n            <p className=\"text-gray-600\">No hay más perfiles por ahora</p>\n            <p className=\"text-gray-500 text-sm\">¡Vuelve más tarde!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14108},"client/src/components/apps/wallapop.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Plus, Search, MessageCircle, Home, User, Camera, Eye, Send } from \"lucide-react\";\nimport { validateImageFile, compressImage } from \"@/lib/fileUtils\";\nimport type { WallapopUser, WallapopProduct } from \"@shared/schema\";\n\ninterface WallapopProps {\n  onBack: () => void;\n}\n\nexport default function Wallapop({ onBack }: WallapopProps) {\n  const [currentUser, setCurrentUser] = useState<WallapopUser | null>(null);\n  const [showRegister, setShowRegister] = useState(true);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [showChat, setShowChat] = useState(false);\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const [selectedImages, setSelectedImages] = useState<string[]>([]);\n  const [uploadingImages, setUploadingImages] = useState(false);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: [\"/api/wallapop/products\"],\n    enabled: !!currentUser,\n  });\n\n  const { data: chats } = useQuery({\n    queryKey: [\"/api/wallapop/chats\", currentUser?.id],\n    enabled: !!currentUser && showChat,\n  });\n\n  const { data: messages } = useQuery({\n    queryKey: [\"/api/wallapop/chats\", currentChatId, \"messages\"],\n    enabled: !!currentChatId,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/wallapop/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Cuenta creada exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallapop/products\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/wallapop/login\", loginData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Bienvenido de vuelta!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallapop/products\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/wallapop/products\", productData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"¡Producto publicado exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallapop/products\"] });\n      setSelectedImages([]);\n    },\n  });\n\n  const createChatMutation = useMutation({\n    mutationFn: async (chatData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/wallapop/chats\", chatData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentChatId(data.id);\n      setShowChat(true);\n      toast({ title: \"Chat iniciado\" });\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      const response = await apiRequest(\"POST\", `/api/wallapop/chats/${currentChatId}/messages`, messageData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallapop/chats\", currentChatId, \"messages\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallapop/chats\", currentUser?.id] });\n    },\n  });\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n    \n    setUploadingImages(true);\n    const newImages: string[] = [];\n    \n    try {\n      for (let i = 0; i < Math.min(files.length, 6 - selectedImages.length); i++) {\n        const file = files[i];\n        validateImageFile(file);\n        const compressedImage = await compressImage(file);\n        newImages.push(compressedImage);\n      }\n      \n      setSelectedImages(prev => [...prev, ...newImages]);\n      toast({ title: `${newImages.length} imagen(es) añadida(s) exitosamente` });\n    } catch (error: any) {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setUploadingImages(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const removeImage = (index: number) => {\n    setSelectedImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      name: formData.get(\"name\"),\n      email: formData.get(\"email\"),\n      location: formData.get(\"location\"),\n      registrationCode: formData.get(\"registrationCode\"),\n    });\n  };\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      email: formData.get(\"email\"),\n    });\n  };\n\n  const handleCreateProduct = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    \n    if (selectedImages.length === 0) {\n      toast({ title: \"Error\", description: \"Debes subir al menos una imagen\", variant: \"destructive\" });\n      return;\n    }\n    \n    const formData = new FormData(e.currentTarget);\n    const priceInCents = Math.round(parseFloat(formData.get(\"price\") as string) * 100);\n    \n    createProductMutation.mutate({\n      sellerId: currentUser!.id,\n      title: formData.get(\"title\"),\n      description: formData.get(\"description\"),\n      price: priceInCents,\n      category: formData.get(\"category\") || \"General\",\n      condition: formData.get(\"condition\") || \"Usado\",\n      location: formData.get(\"location\"),\n      images: selectedImages,\n    });\n  };\n\n  const handleProductClick = async (product: any) => {\n    try {\n      const response = await apiRequest(\"GET\", `/api/wallapop/products/${product.id}`);\n      const productDetails = await response.json();\n      setSelectedProduct(productDetails);\n    } catch (error) {\n      toast({ title: \"Error\", description: \"No se pudo cargar el producto\", variant: \"destructive\" });\n    }\n  };\n\n  const handleContactSeller = () => {\n    if (!selectedProduct || !currentUser) return;\n    \n    createChatMutation.mutate({\n      productId: selectedProduct.id,\n      buyerId: currentUser.id,\n      sellerId: selectedProduct.sellerId\n    });\n  };\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!messageInput.trim() || !currentUser) return;\n    \n    sendMessageMutation.mutate({\n      senderId: currentUser.id,\n      content: messageInput,\n    });\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-semibold text-green-600\">Wallapop</h2>\n          <Search className=\"cursor-pointer\" />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-gray-50\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm w-full max-w-sm\">\n            <div className=\"text-center mb-6\">\n              <i className=\"fas fa-shopping-bag text-4xl text-green-600 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">\n                {showRegister ? \"Compra y vende\" : \"Iniciar Sesión\"}\n              </h3>\n              <p className=\"text-gray-600 text-sm\">\n                {showRegister \n                  ? \"Regístrate para publicar productos\"\n                  : \"Inicia sesión en tu cuenta\"\n                }\n              </p>\n            </div>\n\n            {showRegister ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <Input \n                  name=\"registrationCode\" \n                  placeholder=\"Código de registro (proporcionado por admin)\" \n                  required \n                  data-testid=\"input-registration-code\"\n                  className=\"border-red-300 focus:border-red-500\"\n                />\n                <Input \n                  name=\"name\" \n                  placeholder=\"Nombre\" \n                  required \n                  data-testid=\"input-name\"\n                />\n                <Input \n                  name=\"email\" \n                  type=\"email\" \n                  placeholder=\"Email\" \n                  required \n                  data-testid=\"input-email\"\n                />\n                <Input \n                  name=\"location\" \n                  placeholder=\"Ubicación (Ciudad, País)\" \n                  required \n                  data-testid=\"input-location\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Registrando...\" : \"Registrarse\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input \n                  name=\"email\" \n                  type=\"email\" \n                  placeholder=\"Email\" \n                  required \n                  data-testid=\"input-login-email\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Ingresando...\" : \"Iniciar sesión\"}\n                </Button>\n              </form>\n            )}\n\n            <p className=\"text-center mt-4 text-sm\">\n              {showRegister ? \"¿Ya tienes cuenta?\" : \"¿No tienes cuenta?\"}{\" \"}\n              <button\n                type=\"button\"\n                className=\"text-green-600 hover:underline\"\n                onClick={() => setShowRegister(!showRegister)}\n                data-testid=\"button-toggle-auth\"\n              >\n                {showRegister ? \"Iniciar sesión\" : \"Registrarse\"}\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Product Detail Modal\n  if (selectedProduct) {\n    return (\n      <div className=\"h-full flex flex-col bg-white\">\n        <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            className=\"cursor-pointer\" \n            onClick={() => setSelectedProduct(null)}\n          />\n          <h2 className=\"text-lg font-semibold\">Detalles del producto</h2>\n          <div></div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"aspect-square bg-gray-100\">\n            <img \n              src={selectedProduct.images?.[0] || \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400\"}\n              alt={selectedProduct.title}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          \n          <div className=\"p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span className=\"text-2xl font-bold text-green-600\">\n                {(selectedProduct.price / 100).toFixed(2)}€\n              </span>\n              <span className=\"flex items-center text-sm text-gray-500\">\n                <Eye className=\"h-4 w-4 mr-1\" />\n                {selectedProduct.views || 0} vistas\n              </span>\n            </div>\n            \n            <h3 className=\"text-xl font-semibold mb-2\">{selectedProduct.title}</h3>\n            \n            <div className=\"flex items-center gap-4 text-sm text-gray-600 mb-4\">\n              <span>{selectedProduct.condition}</span>\n              <span>•</span>\n              <span>{selectedProduct.category}</span>\n              {selectedProduct.location && (\n                <>\n                  <span>•</span>\n                  <span>{selectedProduct.location}</span>\n                </>\n              )}\n            </div>\n            \n            {selectedProduct.description && (\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold mb-2\">Descripción</h4>\n                <p className=\"text-gray-700\">{selectedProduct.description}</p>\n              </div>\n            )}\n            \n            <div className=\"border-t pt-4\">\n              <div className=\"flex items-center gap-3 mb-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <span className=\"text-green-600 font-semibold\">\n                    {selectedProduct.sellerName?.charAt(0)?.toUpperCase()}\n                  </span>\n                </div>\n                <div>\n                  <div className=\"font-semibold\">{selectedProduct.sellerName}</div>\n                  <div className=\"text-sm text-gray-500\">Vendedor</div>\n                </div>\n              </div>\n              \n              {selectedProduct.sellerId !== currentUser.id && (\n                <Button \n                  onClick={handleContactSeller}\n                  className=\"w-full bg-green-600 hover:bg-green-700\"\n                  disabled={createChatMutation.isPending}\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  {createChatMutation.isPending ? \"Contactando...\" : \"Contactar\"}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Chat View\n  if (showChat && currentChatId) {\n    return (\n      <div className=\"h-full flex flex-col bg-white\">\n        <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            className=\"cursor-pointer\" \n            onClick={() => { setShowChat(false); setCurrentChatId(null); }}\n          />\n          <h2 className=\"text-lg font-semibold\">Chat</h2>\n          <div></div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n          {messages && Array.isArray(messages) && messages.length > 0 ? (\n            messages.map((message: any) => (\n              <div \n                key={message.id}\n                className={`flex ${message.senderId === currentUser.id ? 'justify-end' : 'justify-start'}`}\n              >\n                <div className={`max-w-xs px-3 py-2 rounded-lg ${\n                  message.senderId === currentUser.id \n                    ? 'bg-green-600 text-white' \n                    : 'bg-gray-200 text-gray-800'\n                }`}>\n                  <div className=\"text-sm\">{message.content}</div>\n                  <div className={`text-xs mt-1 ${\n                    message.senderId === currentUser.id ? 'text-green-100' : 'text-gray-500'\n                  }`}>\n                    {new Date(message.createdAt).toLocaleTimeString('es-ES', { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center text-gray-500 py-8\">\n              Inicia la conversación\n            </div>\n          )}\n        </div>\n\n        <div className=\"border-t p-4\">\n          <form onSubmit={handleSendMessage} className=\"flex gap-2\">\n            <Input\n              value={messageInput}\n              onChange={(e) => setMessageInput(e.target.value)}\n              placeholder=\"Escribe un mensaje...\"\n              className=\"flex-1\"\n            />\n            <Button \n              type=\"submit\" \n              disabled={!messageInput.trim() || sendMessageMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n\n  // Chat List View\n  if (showChat) {\n    return (\n      <div className=\"h-full flex flex-col bg-white\">\n        <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n          <ArrowLeft \n            className=\"cursor-pointer\" \n            onClick={() => setShowChat(false)}\n          />\n          <h2 className=\"text-lg font-semibold\">Mis chats</h2>\n          <div></div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {chats && Array.isArray(chats) && chats.length > 0 ? (\n            <div className=\"space-y-1\">\n              {chats.map((chat: any) => (\n                <div \n                  key={chat.id}\n                  className=\"p-4 border-b hover:bg-gray-50 cursor-pointer\"\n                  onClick={() => setCurrentChatId(chat.id)}\n                >\n                  <div className=\"flex gap-3\">\n                    <img \n                      src={chat.productImage || \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400\"}\n                      alt={chat.productTitle}\n                      className=\"w-12 h-12 rounded object-cover\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold text-sm\">{chat.otherUserName}</div>\n                      <div className=\"text-xs text-gray-600 mb-1\">{chat.productTitle}</div>\n                      {chat.lastMessage && (\n                        <div className=\"text-sm text-gray-500\">{chat.lastMessage}</div>\n                      )}\n                    </div>\n                    <div className=\"text-xs text-gray-400\">\n                      {new Date(chat.lastMessageAt).toLocaleDateString('es-ES')}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-full text-gray-500\">\n              <MessageCircle className=\"h-12 w-12 mb-4\" />\n              <p>No tienes chats aún</p>\n              <p className=\"text-sm\">Contacta con vendedores para iniciar conversaciones</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"bg-white border-b border-gray-200 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-marketplace\"\n          className=\"cursor-pointer\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-semibold text-green-600\">Wallapop</h2>\n        <Search className=\"cursor-pointer\" />\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto bg-gray-50\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600\"></div>\n          </div>\n        ) : products && Array.isArray(products) && products.length > 0 ? (\n          <div className=\"p-4 space-y-3\">\n            {products.map((product: any) => (\n              <div \n                key={product.id} \n                className=\"bg-white rounded-lg p-3 shadow-sm flex gap-3 cursor-pointer hover:shadow-md transition-shadow\"\n                onClick={() => handleProductClick(product)}\n                data-testid={`product-${product.id}`}\n              >\n                <img \n                  src={product.images?.[0] || \"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400\"}\n                  alt={product.title}\n                  className=\"w-20 h-20 rounded-lg object-cover\"\n                />\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold text-sm mb-1\" data-testid={`text-product-title-${product.id}`}>\n                    {product.title}\n                  </h4>\n                  <div className=\"text-lg font-bold text-green-600 mb-1\" data-testid={`text-product-price-${product.id}`}>\n                    {(product.price / 100).toFixed(2)}€\n                  </div>\n                  <div className=\"text-xs text-gray-500 mb-2\">\n                    <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                    {product.location || product.sellerLocation}\n                  </div>\n                  {product.description && (\n                    <p className=\"text-xs text-gray-700 line-clamp-2\">\n                      {product.description}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-gray-500\">\n            <i className=\"fas fa-box-open text-4xl mb-4\"></i>\n            <p>No hay productos disponibles</p>\n            <p className=\"text-sm\">¡Sé el primero en vender!</p>\n          </div>\n        )}\n      </div>\n\n      {/* Floating Add Button */}\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button\n            className=\"fixed bottom-20 right-6 w-14 h-14 rounded-full bg-green-600 hover:bg-green-700 shadow-lg\"\n            data-testid=\"button-add-product\"\n          >\n            <Plus className=\"h-6 w-6\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Publicar Producto</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleCreateProduct} className=\"space-y-4\">\n            <Input \n              name=\"title\" \n              placeholder=\"Título del producto\" \n              required \n              data-testid=\"input-product-title\"\n            />\n            <Input \n              name=\"price\" \n              type=\"number\" \n              step=\"0.01\" \n              placeholder=\"Precio (€)\" \n              required \n              data-testid=\"input-product-price\"\n            />\n            <Textarea \n              name=\"description\" \n              placeholder=\"Descripción del producto\" \n              data-testid=\"input-product-description\"\n            />\n            <Input \n              name=\"category\" \n              placeholder=\"Categoría\" \n              data-testid=\"input-product-category\"\n            />\n            <Input \n              name=\"condition\" \n              placeholder=\"Estado (Nuevo, Usado, etc.)\" \n              data-testid=\"input-product-condition\"\n            />\n            <Input \n              name=\"location\" \n              placeholder=\"Ubicación\" \n              data-testid=\"input-product-location\"\n            />\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-2\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={uploadingImages || selectedImages.length >= 6}\n                  data-testid=\"button-upload-images\"\n                >\n                  {uploadingImages ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600\"></div>\n                  ) : (\n                    <Camera className=\"h-4 w-4\" />\n                  )}\n                  Subir imágenes ({selectedImages.length}/6)\n                </Button>\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  multiple\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n              </div>\n              \n              {selectedImages.length > 0 && (\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {selectedImages.map((image, index) => (\n                    <div key={index} className=\"relative\">\n                      <img \n                        src={image} \n                        alt={`Imagen ${index + 1}`}\n                        className=\"w-full h-16 object-cover rounded\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => removeImage(index)}\n                        className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                      >\n                        ×\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n            \n            <Button \n              type=\"submit\" \n              disabled={createProductMutation.isPending || selectedImages.length === 0}\n              data-testid=\"button-submit-product\"\n            >\n              {createProductMutation.isPending ? \"Publicando...\" : \"Publicar\"}\n            </Button>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <div className=\"bg-white border-t border-gray-200 flex items-center justify-around py-3\">\n        <div className=\"flex flex-col items-center text-green-600\">\n          <Home className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <Search className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <Plus className=\"w-5 h-5\" />\n        </div>\n        <div \n          className=\"flex flex-col items-center text-gray-400 cursor-pointer\"\n          onClick={() => setShowChat(true)}\n        >\n          <MessageCircle className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex flex-col items-center text-gray-400\">\n          <User className=\"w-5 h-5\" />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":26605},"client/src/components/apps/whatsapp.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Send, Phone, Users, MessageCircle, MoreVertical } from \"lucide-react\";\nimport type { WhatsappUser, WhatsappChat, WhatsappMessage } from \"@shared/schema\";\n\ninterface WhatsAppProps {\n  onBack: () => void;\n}\n\nexport default function WhatsApp({ onBack }: WhatsAppProps) {\n  const [currentUser, setCurrentUser] = useState<WhatsappUser | null>(null);\n  const [showRegister, setShowRegister] = useState(true);\n  const [selectedChat, setSelectedChat] = useState<WhatsappUser | null>(null);\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: users } = useQuery({\n    queryKey: [\"/api/whatsapp/users\"],\n    enabled: !!currentUser,\n  });\n\n  const { data: chats } = useQuery({\n    queryKey: [\"/api/whatsapp/chats\", currentUser?.phone],\n    enabled: !!currentUser,\n  });\n\n  const { data: messages, refetch: refetchMessages } = useQuery({\n    queryKey: [\"/api/whatsapp/messages\", currentChatId],\n    enabled: !!currentChatId,\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/whatsapp/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Número verificado exitosamente!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/users\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (loginData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/whatsapp/login\", loginData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentUser(data.user);\n      toast({ title: \"¡Bienvenido de vuelta!\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/users\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleRegister = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    registerMutation.mutate({\n      name: formData.get(\"name\"),\n      phone: formData.get(\"phone\"),\n      registrationCode: formData.get(\"registrationCode\"),\n    });\n  };\n\n  const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    loginMutation.mutate({\n      phone: formData.get(\"phone\"),\n    });\n  };\n\n  const createChatMutation = useMutation({\n    mutationFn: async (participants: string[]) => {\n      const response = await apiRequest(\"POST\", \"/api/whatsapp/chats/get-or-create\", { participants });\n      return response.json();\n    },\n    onSuccess: (chat) => {\n      setCurrentChatId(chat.id);\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/whatsapp/messages\", messageData);\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      refetchMessages();\n      queryClient.invalidateQueries({ queryKey: [\"/api/whatsapp/chats\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: \"No se pudo enviar el mensaje\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSelectChat = async (user: WhatsappUser) => {\n    if (currentUser) {\n      setSelectedChat(user);\n      createChatMutation.mutate([currentUser.phone, user.phone]);\n    }\n  };\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (messageInput.trim() && currentChatId && currentUser) {\n      sendMessageMutation.mutate({\n        chatId: currentChatId,\n        senderPhone: currentUser.phone,\n        content: messageInput,\n      });\n    }\n  };\n\n  if (!currentUser) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"bg-green-700 text-white flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer text-white\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-semibold\">WhatsApp</h2>\n          <MoreVertical className=\"cursor-pointer\" />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-gray-50\">\n          <div className=\"bg-white rounded-lg p-6 shadow-sm w-full max-w-sm\">\n            <div className=\"text-center mb-6\">\n              <i className=\"fab fa-whatsapp text-4xl text-green-600 mb-4\"></i>\n              <h3 className=\"text-xl font-semibold mb-2\">\n                {showRegister ? \"Verificar número\" : \"Iniciar Sesión\"}\n              </h3>\n              <p className=\"text-gray-600 text-sm\">\n                {showRegister \n                  ? \"Ingresa tu número de teléfono para verificar tu cuenta\"\n                  : \"Ingresa tu número registrado\"\n                }\n              </p>\n            </div>\n\n            {showRegister ? (\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <Input \n                  name=\"registrationCode\" \n                  placeholder=\"Código de registro (proporcionado por admin)\" \n                  required \n                  data-testid=\"input-registration-code\"\n                  className=\"border-red-300 focus:border-red-500\"\n                />\n                <Input \n                  name=\"name\" \n                  placeholder=\"Nombre\" \n                  required \n                  data-testid=\"input-name\"\n                />\n                <Input \n                  name=\"phone\" \n                  type=\"tel\" \n                  placeholder=\"+34 123 456 789\" \n                  required \n                  data-testid=\"input-phone\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700\" \n                  disabled={registerMutation.isPending}\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? \"Verificando...\" : \"Verificar\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input \n                  name=\"phone\" \n                  type=\"tel\" \n                  placeholder=\"+34 123 456 789\" \n                  required \n                  data-testid=\"input-login-phone\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-green-600 hover:bg-green-700\" \n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Verificando...\" : \"Verificar\"}\n                </Button>\n              </form>\n            )}\n\n            <p className=\"text-center mt-4 text-sm\">\n              {showRegister ? \"¿Ya tienes cuenta?\" : \"¿No tienes cuenta?\"}{\" \"}\n              <button\n                type=\"button\"\n                className=\"text-green-600 hover:underline\"\n                onClick={() => setShowRegister(!showRegister)}\n                data-testid=\"button-toggle-auth\"\n              >\n                {showRegister ? \"Iniciar sesión\" : \"Registrarse\"}\n              </button>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedChat) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"bg-green-700 text-white flex items-center gap-3 p-4\">\n          <ArrowLeft \n            data-testid=\"button-back-to-chats\"\n            className=\"cursor-pointer\" \n            onClick={() => setSelectedChat(null)} \n          />\n          <div className=\"w-10 h-10 bg-green-600 rounded-full flex items-center justify-center text-white font-semibold\">\n            {selectedChat.name.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"font-semibold\" data-testid={`text-chat-name-${selectedChat.id}`}>\n              {selectedChat.name}\n            </div>\n            <div className=\"text-xs opacity-80\">\n              en línea\n            </div>\n          </div>\n          <MoreVertical className=\"cursor-pointer\" />\n        </div>\n\n        <div \n          className=\"flex-1 overflow-y-auto p-4 space-y-3\"\n          style={{ \n            backgroundImage: 'url(\"data:image/svg+xml,%3Csvg width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"%3E%3Cdefs%3E%3Cpattern id=\"chat-bg\" x=\"0\" y=\"0\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\"%3E%3Cpath d=\"M0 0h100v100H0z\" fill=\"%23e5ddd5\"/%3E%3C/pattern%3E%3C/defs%3E%3Crect width=\"100\" height=\"100\" fill=\"url(%23chat-bg)\"/%3E%3C/svg%3E\")',\n            backgroundColor: '#e5ddd5'\n          }}\n        >\n          {messages && messages.length > 0 ? (\n            messages.map((message: any) => {\n              const isFromCurrentUser = message.senderPhone === currentUser?.phone;\n              return (\n                <div \n                  key={message.id} \n                  className={`message p-3 max-w-xs rounded-lg shadow-sm ${\n                    isFromCurrentUser \n                      ? 'bg-green-100 ml-auto' \n                      : 'bg-white mr-auto'\n                  }`}\n                >\n                  <div className=\"text-sm\">{message.content}</div>\n                  <div className={`text-xs text-gray-500 mt-1 ${\n                    isFromCurrentUser ? 'text-right' : 'text-left'\n                  }`}>\n                    {new Date(message.sentAt).toLocaleTimeString('es-ES', { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </div>\n                </div>\n              );\n            })\n          ) : (\n            <div className=\"text-center\">\n              <div className=\"text-xs text-gray-500 bg-white/70 rounded-full px-3 py-1 inline-block\">\n                Chat con {selectedChat.name} - {selectedChat.phone}\n              </div>\n              <div className=\"text-sm text-gray-600 mt-4\">\n                No hay mensajes aún. ¡Envía el primero!\n              </div>\n            </div>\n          )}\n        </div>\n\n        <form onSubmit={handleSendMessage} className=\"bg-white border-t border-gray-200 p-4 flex gap-3 items-center\">\n          <Input \n            value={messageInput}\n            onChange={(e) => setMessageInput(e.target.value)}\n            placeholder=\"Escribe un mensaje...\"\n            className=\"flex-1 rounded-full\"\n            data-testid=\"input-message\"\n          />\n          <Button \n            type=\"submit\" \n            size=\"icon\" \n            className=\"rounded-full bg-green-600 hover:bg-green-700\"\n            disabled={sendMessageMutation.isPending || !messageInput.trim()}\n            data-testid=\"button-send-message\"\n          >\n            {sendMessageMutation.isPending ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n            ) : (\n              <Send className=\"h-4 w-4\" />\n            )}\n          </Button>\n        </form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <div className=\"bg-green-700 text-white flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-chats\"\n          className=\"cursor-pointer text-white\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-semibold\">WhatsApp</h2>\n        <MoreVertical className=\"cursor-pointer\" />\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto bg-white\">\n        {users && users.filter((user: WhatsappUser) => user.id !== currentUser.id).length > 0 ? (\n          <div>\n            {users\n              .filter((user: WhatsappUser) => user.id !== currentUser.id)\n              .map((user: WhatsappUser) => (\n                <div \n                  key={user.id}\n                  className=\"flex items-center gap-3 p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50\"\n                  onClick={() => handleSelectChat(user)}\n                  data-testid={`chat-${user.id}`}\n                >\n                  <div className=\"w-12 h-12 bg-green-600 rounded-full flex items-center justify-center text-white font-semibold\">\n                    {user.name.charAt(0).toUpperCase()}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold\" data-testid={`text-user-name-${user.id}`}>\n                      {user.name}\n                    </div>\n                    <div className=\"text-sm text-gray-500\" data-testid={`text-user-phone-${user.id}`}>\n                      {user.phone}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-400\">\n                    12:30\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center h-full text-gray-500\">\n            <i className=\"fab fa-whatsapp text-4xl mb-4\"></i>\n            <p>No hay otros usuarios registrados aún</p>\n            <p className=\"text-sm\">Invita a tus amigos a unirse</p>\n          </div>\n        )}\n      </div>\n\n      <div className=\"bg-green-700 flex items-center justify-around py-3\">\n        <div className=\"flex flex-col items-center text-white\">\n          <MessageCircle className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex flex-col items-center text-green-300\">\n          <Users className=\"w-5 h-5\" />\n        </div>\n        <div className=\"flex flex-col items-center text-green-300\">\n          <Phone className=\"w-5 h-5\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14267},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/apps/flappy-bird.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Play, Pause, RotateCcw } from \"lucide-react\";\n\ninterface FlappyBirdProps {\n  onBack: () => void;\n}\n\ninterface Bird {\n  x: number;\n  y: number;\n  velocity: number;\n}\n\ninterface Pipe {\n  x: number;\n  topHeight: number;\n  gap: number;\n}\n\nexport default function FlappyBird({ onBack }: FlappyBirdProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const gameLoopRef = useRef<number>();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"flappybird-highscore\") || \"0\");\n  });\n  const [gameOver, setGameOver] = useState(false);\n\n  // Game state\n  const [bird, setBird] = useState<Bird>({ x: 50, y: 200, velocity: 0 });\n  const [pipes, setPipes] = useState<Pipe[]>([]);\n\n  const CANVAS_WIDTH = 320;\n  const CANVAS_HEIGHT = 400;\n  const BIRD_SIZE = 20;\n  const PIPE_WIDTH = 50;\n  const PIPE_GAP = 120;\n  const GRAVITY = 0.5;\n  const JUMP_STRENGTH = -8;\n  const PIPE_SPEED = 2;\n\n  const jump = useCallback(() => {\n    if (!gameOver) {\n      setBird(prev => ({ ...prev, velocity: JUMP_STRENGTH }));\n      if (!isPlaying) {\n        setIsPlaying(true);\n      }\n    }\n  }, [gameOver, isPlaying]);\n\n  const resetGame = useCallback(() => {\n    setBird({ x: 50, y: 200, velocity: 0 });\n    setPipes([]);\n    setScore(0);\n    setGameOver(false);\n    setIsPlaying(false);\n  }, []);\n\n  // Game loop\n  useEffect(() => {\n    if (!isPlaying || gameOver) return;\n\n    const gameLoop = () => {\n      setBird(prev => {\n        let newY = prev.y + prev.velocity;\n        let newVelocity = prev.velocity + GRAVITY;\n\n        // Check bounds\n        if (newY < 0) {\n          newY = 0;\n          newVelocity = 0;\n        }\n        if (newY > CANVAS_HEIGHT - BIRD_SIZE) {\n          setGameOver(true);\n          setIsPlaying(false);\n        }\n\n        return { ...prev, y: newY, velocity: newVelocity };\n      });\n\n      setPipes(prev => {\n        let newPipes = [...prev];\n\n        // Move pipes\n        newPipes = newPipes.map(pipe => ({ ...pipe, x: pipe.x - PIPE_SPEED }));\n\n        // Remove off-screen pipes and add score\n        newPipes = newPipes.filter(pipe => {\n          if (pipe.x + PIPE_WIDTH < 0) {\n            setScore(s => s + 1);\n            return false;\n          }\n          return true;\n        });\n\n        // Add new pipe\n        if (newPipes.length === 0 || newPipes[newPipes.length - 1].x < CANVAS_WIDTH - 200) {\n          const topHeight = Math.random() * (CANVAS_HEIGHT - PIPE_GAP - 100) + 50;\n          newPipes.push({\n            x: CANVAS_WIDTH,\n            topHeight,\n            gap: PIPE_GAP,\n          });\n        }\n\n        return newPipes;\n      });\n\n      gameLoopRef.current = requestAnimationFrame(gameLoop);\n    };\n\n    gameLoopRef.current = requestAnimationFrame(gameLoop);\n\n    return () => {\n      if (gameLoopRef.current) {\n        cancelAnimationFrame(gameLoopRef.current);\n      }\n    };\n  }, [isPlaying, gameOver]);\n\n  // Collision detection\n  useEffect(() => {\n    if (!isPlaying) return;\n\n    const checkCollision = () => {\n      for (const pipe of pipes) {\n        // Check if bird is in pipe's x range\n        if (bird.x + BIRD_SIZE > pipe.x && bird.x < pipe.x + PIPE_WIDTH) {\n          // Check if bird hits top or bottom pipe\n          if (bird.y < pipe.topHeight || bird.y + BIRD_SIZE > pipe.topHeight + pipe.gap) {\n            setGameOver(true);\n            setIsPlaying(false);\n            return;\n          }\n        }\n      }\n    };\n\n    checkCollision();\n  }, [bird, pipes, isPlaying]);\n\n  // Update high score\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n      localStorage.setItem(\"flappybird-highscore\", score.toString());\n    }\n  }, [score, highScore]);\n\n  // Canvas rendering\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#87CEEB\";\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    // Draw pipes\n    ctx.fillStyle = \"#228B22\";\n    pipes.forEach(pipe => {\n      // Top pipe\n      ctx.fillRect(pipe.x, 0, PIPE_WIDTH, pipe.topHeight);\n      // Bottom pipe\n      ctx.fillRect(pipe.x, pipe.topHeight + pipe.gap, PIPE_WIDTH, CANVAS_HEIGHT - pipe.topHeight - pipe.gap);\n    });\n\n    // Draw bird\n    ctx.fillStyle = \"#FFD700\";\n    ctx.fillRect(bird.x, bird.y, BIRD_SIZE, BIRD_SIZE);\n\n    // Add simple bird details\n    ctx.fillStyle = \"#FF4500\";\n    ctx.fillRect(bird.x + 15, bird.y + 8, 5, 4); // Beak\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(bird.x + 5, bird.y + 5, 3, 3); // Eye\n  });\n\n  return (\n    <div className=\"h-full flex flex-col bg-gradient-to-b from-blue-400 to-blue-600\">\n      {/* Header */}\n      <div className=\"bg-yellow-500 border-b border-yellow-600 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back\"\n          className=\"cursor-pointer text-white\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-bold text-white\">Flappy Bird</h2>\n        <div className=\"w-6\" />\n      </div>\n\n      {/* Game Content */}\n      <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\n        {/* Score Display */}\n        <div className=\"text-center mb-4\">\n          <div className=\"text-white text-xl font-bold\">Score: {score}</div>\n          <div className=\"text-yellow-300 text-sm\">High Score: {highScore}</div>\n        </div>\n\n        {/* Game Canvas */}\n        <div className=\"relative\">\n          <canvas\n            ref={canvasRef}\n            width={CANVAS_WIDTH}\n            height={CANVAS_HEIGHT}\n            className=\"border-2 border-white rounded-lg bg-sky-300 cursor-pointer\"\n            onClick={jump}\n            data-testid=\"game-canvas\"\n          />\n          \n          {/* Game Over Overlay */}\n          {gameOver && (\n            <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center rounded-lg\">\n              <div className=\"text-center text-white\">\n                <h3 className=\"text-2xl font-bold mb-2\">Game Over!</h3>\n                <p className=\"text-lg mb-4\">Score: {score}</p>\n                {score === highScore && score > 0 && (\n                  <p className=\"text-yellow-300 mb-4\">🎉 New High Score! 🎉</p>\n                )}\n                <Button \n                  onClick={resetGame}\n                  className=\"bg-yellow-500 hover:bg-yellow-600 text-white\"\n                  data-testid=\"button-restart\"\n                >\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  Play Again\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Start Screen */}\n          {!isPlaying && !gameOver && (\n            <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center rounded-lg\">\n              <div className=\"text-center text-white\">\n                <h3 className=\"text-xl font-bold mb-4\">Tap to Start!</h3>\n                <p className=\"text-sm mb-4\">Tap the screen to make the bird fly</p>\n                <Button \n                  onClick={jump}\n                  className=\"bg-yellow-500 hover:bg-yellow-600 text-white\"\n                  data-testid=\"button-start\"\n                >\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Start Game\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Controls */}\n        <div className=\"mt-4 text-center\">\n          <p className=\"text-white text-sm mb-2\">Tap screen or button to fly!</p>\n          <div className=\"flex gap-2 justify-center\">\n            {isPlaying && !gameOver && (\n              <Button \n                onClick={() => setIsPlaying(false)}\n                className=\"bg-red-500 hover:bg-red-600 text-white\"\n                data-testid=\"button-pause\"\n              >\n                <Pause className=\"w-4 h-4\" />\n              </Button>\n            )}\n            {!isPlaying && !gameOver && score > 0 && (\n              <Button \n                onClick={() => setIsPlaying(true)}\n                className=\"bg-green-500 hover:bg-green-600 text-white\"\n                data-testid=\"button-resume\"\n              >\n                <Play className=\"w-4 h-4\" />\n              </Button>\n            )}\n            <Button \n              onClick={resetGame}\n              className=\"bg-gray-500 hover:bg-gray-600 text-white\"\n              data-testid=\"button-reset\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8794},"client/src/components/apps/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Shield, Key, Plus, Copy, Trash2, Users, Calendar } from \"lucide-react\";\n\ninterface AdminProps {\n  onBack: () => void;\n}\n\ninterface Admin {\n  id: string;\n  username: string;\n  isOneTimeUse: boolean;\n  isUsed: boolean;\n  createdAt: string;\n}\n\ninterface RegistrationCode {\n  id: string;\n  code: string;\n  isUsed: boolean;\n  usedBy?: string;\n  appType: string;\n  createdAt: string;\n  usedAt?: string;\n  expiresAt?: string;\n}\n\nexport default function Admin({ onBack }: AdminProps) {\n  const [currentAdmin, setCurrentAdmin] = useState<Admin | null>(null);\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [codeForm, setCodeForm] = useState({ \n    appType: \"\", \n    count: 1, \n    expiresAt: \"\" \n  });\n  const { toast } = useToast();\n\n  const { data: codes, refetch: refetchCodes } = useQuery({\n    queryKey: [\"/api/admin/codes\"],\n    enabled: !!currentAdmin,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentAdmin(data.admin);\n      toast({ title: \"Acceso concedido\", description: \"Bienvenido al panel de administración\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Acceso denegado\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const generateCodesMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/admin/codes/generate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({ \n        title: \"Códigos generados\", \n        description: `Se generaron ${data.codes.length} código(s) exitosamente` \n      });\n      refetchCodes();\n      setCodeForm({ appType: \"\", count: 1, expiresAt: \"\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleGenerateCodes = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!codeForm.appType) {\n      toast({ title: \"Error\", description: \"Selecciona una aplicación\", variant: \"destructive\" });\n      return;\n    }\n\n    const data: any = {\n      appType: codeForm.appType,\n      adminId: currentAdmin!.id,\n      count: codeForm.count,\n    };\n\n    if (codeForm.expiresAt) {\n      data.expiresAt = new Date(codeForm.expiresAt).toISOString();\n    }\n\n    generateCodesMutation.mutate(data);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({ title: \"Copiado\", description: \"Código copiado al portapapeles\" });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('es-ES', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getAppDisplayName = (appType: string) => {\n    const names: Record<string, string> = {\n      instagram: \"Instagram\",\n      tinder: \"Tinder\",\n      wallapop: \"Wallapop\",\n      whatsapp: \"WhatsApp\",\n      darkweb: \"Dark Web\"\n    };\n    return names[appType] || appType;\n  };\n\n  const getAppColor = (appType: string) => {\n    const colors: Record<string, string> = {\n      instagram: \"bg-gradient-to-r from-purple-500 to-pink-500\",\n      tinder: \"bg-gradient-to-r from-pink-500 to-red-500\",\n      wallapop: \"bg-gradient-to-r from-green-500 to-teal-500\",\n      whatsapp: \"bg-gradient-to-r from-green-600 to-green-700\",\n      darkweb: \"bg-gradient-to-r from-gray-800 to-black\"\n    };\n    return colors[appType] || \"bg-gray-500\";\n  };\n\n  if (!currentAdmin) {\n    return (\n      <div className=\"h-full flex flex-col\">\n        <div className=\"bg-gray-900 border-b border-gray-700 flex items-center justify-between p-4\">\n          <ArrowLeft \n            data-testid=\"button-back\"\n            className=\"cursor-pointer text-white\" \n            onClick={onBack} \n          />\n          <h2 className=\"text-lg font-semibold text-white\">Panel Admin</h2>\n          <Shield className=\"text-blue-400\" />\n        </div>\n\n        <div className=\"flex-1 flex flex-col items-center justify-center p-6 bg-gray-100\">\n          <Card className=\"w-full max-w-sm\">\n            <CardHeader className=\"text-center\">\n              <Shield className=\"mx-auto h-12 w-12 text-blue-500 mb-4\" />\n              <CardTitle>Acceso Administrativo</CardTitle>\n              <CardDescription>\n                Ingresa tus credenciales de administrador\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <Input\n                  placeholder=\"Usuario\"\n                  value={loginForm.username}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, username: e.target.value }))}\n                  required\n                  data-testid=\"input-username\"\n                />\n                <Input\n                  type=\"password\"\n                  placeholder=\"Contraseña\"\n                  value={loginForm.password}\n                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}\n                  required\n                  data-testid=\"input-password\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? \"Verificando...\" : \"Acceder\"}\n                </Button>\n              </form>\n              \n              <div className=\"mt-4 p-3 bg-blue-50 rounded-md\">\n                <p className=\"text-xs text-blue-700\">\n                  <strong>Credenciales por defecto:</strong><br />\n                  Usuario: admin<br />\n                  Contraseña: admin123\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col bg-gray-50\">\n      <div className=\"bg-gray-900 border-b border-gray-700 flex items-center justify-between p-4\">\n        <ArrowLeft \n          data-testid=\"button-back-main\"\n          className=\"cursor-pointer text-white\" \n          onClick={onBack} \n        />\n        <h2 className=\"text-lg font-semibold text-white\">Panel Admin</h2>\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-4 w-4 text-green-400\" />\n          <span className=\"text-green-400 text-sm\">{currentAdmin.username}</span>\n        </div>\n      </div>\n\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n        {/* Generate Codes Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Generar Códigos de Registro\n            </CardTitle>\n            <CardDescription>\n              Crea nuevos códigos de registro para las aplicaciones\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleGenerateCodes} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Select \n                  value={codeForm.appType} \n                  onValueChange={(value) => setCodeForm(prev => ({ ...prev, appType: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-app-type\">\n                    <SelectValue placeholder=\"Seleccionar aplicación\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"instagram\">Instagram</SelectItem>\n                    <SelectItem value=\"tinder\">Tinder</SelectItem>\n                    <SelectItem value=\"wallapop\">Wallapop</SelectItem>\n                    <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\n                    <SelectItem value=\"darkweb\">Dark Web</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Input\n                  type=\"number\"\n                  placeholder=\"Cantidad\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={codeForm.count}\n                  onChange={(e) => setCodeForm(prev => ({ ...prev, count: parseInt(e.target.value) || 1 }))}\n                  data-testid=\"input-count\"\n                />\n              </div>\n              \n              <Input\n                type=\"datetime-local\"\n                placeholder=\"Fecha de expiración (opcional)\"\n                value={codeForm.expiresAt}\n                onChange={(e) => setCodeForm(prev => ({ ...prev, expiresAt: e.target.value }))}\n                data-testid=\"input-expires\"\n              />\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\"\n                disabled={generateCodesMutation.isPending}\n                data-testid=\"button-generate\"\n              >\n                {generateCodesMutation.isPending ? \"Generando...\" : \"Generar Códigos\"}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Active Codes Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Key className=\"h-5 w-5\" />\n              Códigos Activos\n            </CardTitle>\n            <CardDescription>\n              Gestiona los códigos de registro existentes\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {codes && Array.isArray(codes) && codes.length > 0 ? (\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {codes.map((code: RegistrationCode) => (\n                  <div \n                    key={code.id} \n                    className={`p-3 rounded-lg border ${\n                      code.isUsed \n                        ? 'bg-gray-100 border-gray-300' \n                        : 'bg-white border-gray-200'\n                    }`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`px-2 py-1 rounded text-white text-xs font-bold ${getAppColor(code.appType)}`}>\n                          {getAppDisplayName(code.appType)}\n                        </div>\n                        <code className=\"bg-gray-100 px-2 py-1 rounded font-mono text-sm\">\n                          {code.code}\n                        </code>\n                        {code.isUsed ? (\n                          <Badge variant=\"secondary\">Usado</Badge>\n                        ) : (\n                          <Badge variant=\"default\" className=\"bg-green-500\">Activo</Badge>\n                        )}\n                      </div>\n                      \n                      {!code.isUsed && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => copyToClipboard(code.code)}\n                          data-testid=\"button-copy-code\"\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-2 text-xs text-gray-500 space-y-1\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3\" />\n                        Creado: {formatDate(code.createdAt)}\n                      </div>\n                      {code.expiresAt && (\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Expira: {formatDate(code.expiresAt)}\n                        </div>\n                      )}\n                      {code.isUsed && code.usedBy && (\n                        <div className=\"text-gray-600\">\n                          Usado por: {code.usedBy} el {code.usedAt ? formatDate(code.usedAt) : 'N/A'}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-gray-500\">\n                <Key className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No hay códigos generados aún</p>\n                <p className=\"text-sm\">Genera códigos usando el formulario de arriba</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13494}},"version":1}